# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cspyce0
else:
    import _cspyce0

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


is_swig_py3 = _cspyce0.is_swig_py3

def axisar(axis: "ConstSpiceDouble [3]", angle: "SpiceDouble") -> "ConstSpiceDouble [3], SpiceDouble [3][3]":
    r"""axisar(ConstSpiceDouble [3] axis, SpiceDouble angle)"""
    return _cspyce0.axisar(axis, angle)

def axisar_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *") -> "int, int, int *":
    r"""axisar_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11)"""
    return _cspyce0.axisar_vector(in21, in11)

def b1900() -> "SpiceDouble":
    r"""b1900() -> SpiceDouble"""
    return _cspyce0.b1900()

def b1950() -> "SpiceDouble":
    r"""b1950() -> SpiceDouble"""
    return _cspyce0.b1950()

def bltfrm(frmcls: "SpiceInt") -> "SpiceInt *":
    r"""bltfrm(SpiceInt frmcls)"""
    return _cspyce0.bltfrm(frmcls)

def bodc2n(code: "SpiceInt") -> "SpiceChar [256], SpiceBoolean *":
    r"""bodc2n(SpiceInt code)"""
    return _cspyce0.bodc2n(code)

def bodc2s(code: "SpiceInt") -> "SpiceChar [256]":
    r"""bodc2s(SpiceInt code)"""
    return _cspyce0.bodc2s(code)

def boddef(CONST_STRING: "ConstSpiceChar *", code: "SpiceInt") -> "void":
    r"""boddef(ConstSpiceChar * CONST_STRING, SpiceInt code)"""
    return _cspyce0.boddef(CONST_STRING, code)

def bodfnd(body: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceBoolean":
    r"""bodfnd(SpiceInt body, ConstSpiceChar * CONST_STRING) -> SpiceBoolean"""
    return _cspyce0.bodfnd(body, CONST_STRING)

def bodn2c(CONST_STRING: "ConstSpiceChar *") -> "SpiceInt *, SpiceBoolean *":
    r"""bodn2c(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.bodn2c(CONST_STRING)

def bods2c(CONST_STRING: "ConstSpiceChar *") -> "SpiceInt *, SpiceBoolean *":
    r"""bods2c(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.bods2c(CONST_STRING)

def bodvar(body: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble [80]":
    r"""bodvar(SpiceInt body, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.bodvar(body, CONST_STRING)

def bodvcd(bodyid: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble [80]":
    r"""bodvcd(SpiceInt bodyid, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.bodvcd(bodyid, CONST_STRING)

def bodvrd(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *") -> "SpiceDouble [80]":
    r"""bodvrd(ConstSpiceChar * arg1, ConstSpiceChar * arg2)"""
    return _cspyce0.bodvrd(arg1, arg2)

def ccifrm(frclss: "SpiceInt", clssid: "SpiceInt") -> "SpiceInt *, SpiceChar [256], SpiceInt *, SpiceBoolean *":
    r"""ccifrm(SpiceInt frclss, SpiceInt clssid)"""
    return _cspyce0.ccifrm(frclss, clssid)

def cgv2el(center: "ConstSpiceDouble [3]", vec1: "ConstSpiceDouble [3]", vec2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [NELLIPSE]":
    r"""cgv2el(ConstSpiceDouble [3] center, ConstSpiceDouble [3] vec1, ConstSpiceDouble [3] vec2)"""
    return _cspyce0.cgv2el(center, vec1, vec2)

def cgv2el_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""cgv2el_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23)"""
    return _cspyce0.cgv2el_vector(in21, in22, in23)

def chkin(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""chkin(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.chkin(CONST_STRING)

def chkout(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""chkout(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.chkout(CONST_STRING)

def cidfrm(cent: "SpiceInt") -> "SpiceInt *, SpiceChar [256], SpiceBoolean *":
    r"""cidfrm(SpiceInt cent)"""
    return _cspyce0.cidfrm(cent)

def ckcov(ck: "ConstSpiceChar *", idcode: "SpiceInt", needav: "SpiceBoolean", level: "ConstSpiceChar *", tol: "SpiceDouble", timsys: "ConstSpiceChar *") -> "SpiceInt *":
    r"""ckcov(ConstSpiceChar * ck, SpiceInt idcode, SpiceBoolean needav, ConstSpiceChar * level, SpiceDouble tol, ConstSpiceChar * timsys)"""
    return _cspyce0.ckcov(ck, idcode, needav, level, tol, timsys)

def ckgp(inst: "SpiceInt", sclkdp: "SpiceDouble", tol: "SpiceDouble", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble [3][3], SpiceDouble *, SpiceBoolean *":
    r"""ckgp(SpiceInt inst, SpiceDouble sclkdp, SpiceDouble tol, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.ckgp(inst, sclkdp, tol, CONST_STRING)

def ckgp_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", str1: "ConstSpiceChar *") -> "int, int, int *, int *, int *":
    r"""ckgp_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceChar * str1)"""
    return _cspyce0.ckgp_vector(k1, in11, in12, str1)

def ckgpav(inst: "SpiceInt", sclkdp: "SpiceDouble", tol: "SpiceDouble", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble [3][3], SpiceDouble [3], SpiceDouble *, SpiceBoolean *":
    r"""ckgpav(SpiceInt inst, SpiceDouble sclkdp, SpiceDouble tol, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.ckgpav(inst, sclkdp, tol, CONST_STRING)

def ckgpav_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", str1: "ConstSpiceChar *") -> "int, int, int *, int *, int *, int *":
    r"""ckgpav_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceChar * str1)"""
    return _cspyce0.ckgpav_vector(k1, in11, in12, str1)

def ckobj(ck: "ConstSpiceChar *") -> "int *":
    r"""ckobj(ConstSpiceChar * ck)"""
    return _cspyce0.ckobj(ck)

def clight() -> "SpiceDouble":
    r"""clight() -> SpiceDouble"""
    return _cspyce0.clight()

def clpool() -> "void":
    r"""clpool()"""
    return _cspyce0.clpool()

def cnmfrm(cname: "ConstSpiceChar *") -> "SpiceInt *, SpiceChar [256], SpiceBoolean *":
    r"""cnmfrm(ConstSpiceChar * cname)"""
    return _cspyce0.cnmfrm(cname)

def conics(elts: "ConstSpiceDouble [8]", et: "SpiceDouble") -> "ConstSpiceDouble [8], SpiceDouble [6]":
    r"""conics(ConstSpiceDouble [8] elts, SpiceDouble et)"""
    return _cspyce0.conics(elts, et)

def conics_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *") -> "int, int, int *":
    r"""conics_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11)"""
    return _cspyce0.conics_vector(in21, in11)

def convrt(x: "SpiceDouble", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""convrt(SpiceDouble x, ConstSpiceChar * arg2, ConstSpiceChar * arg3)"""
    return _cspyce0.convrt(x, arg2, arg3)

def convrt_vector(in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *") -> "int, int *":
    r"""convrt_vector(ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2)"""
    return _cspyce0.convrt_vector(in11, str1, str2)

def cyllat(r: "SpiceDouble", lonc: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""cyllat(SpiceDouble r, SpiceDouble lonc, SpiceDouble z)"""
    return _cspyce0.cyllat(r, lonc, z)

def cyllat_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""cyllat_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.cyllat_vector(in11, in12, in13)

def cylrec(r: "SpiceDouble", lon: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3]":
    r"""cylrec(SpiceDouble r, SpiceDouble lon, SpiceDouble z)"""
    return _cspyce0.cylrec(r, lon, z)

def cylrec_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""cylrec_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.cylrec_vector(in11, in12, in13)

def cylsph(r: "SpiceDouble", lonc: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""cylsph(SpiceDouble r, SpiceDouble lonc, SpiceDouble z)"""
    return _cspyce0.cylsph(r, lonc, z)

def cylsph_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""cylsph_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.cylsph_vector(in11, in12, in13)

def dafbfs(handle: "SpiceInt") -> "void":
    r"""dafbfs(SpiceInt handle)"""
    return _cspyce0.dafbfs(handle)

def dafcls(handle: "SpiceInt") -> "void":
    r"""dafcls(SpiceInt handle)"""
    return _cspyce0.dafcls(handle)

def dafgda(handle: "SpiceInt", begin: "SpiceInt", end: "SpiceInt") -> "SpiceDouble [256]":
    r"""dafgda(SpiceInt handle, SpiceInt begin, SpiceInt end)"""
    return _cspyce0.dafgda(handle, begin, end)

def dafgn() -> "SpiceChar [256]":
    r"""dafgn()"""
    return _cspyce0.dafgn()

def dafgs() -> "SpiceDouble [128]":
    r"""dafgs()"""
    return _cspyce0.dafgs()

def daffna() -> "SpiceBoolean *":
    r"""daffna()"""
    return _cspyce0.daffna()

def dafopr(CONST_STRING: "ConstSpiceChar *") -> "SpiceInt *":
    r"""dafopr(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.dafopr(CONST_STRING)

def dafus(sum: "ConstSpiceDouble [128]", nd: "SpiceInt", ni: "SpiceInt") -> "ConstSpiceDouble [128], SpiceDouble [128], SpiceInt [256]":
    r"""dafus(ConstSpiceDouble [128] sum, SpiceInt nd, SpiceInt ni)"""
    return _cspyce0.dafus(sum, nd, ni)

def dcyldr(x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""dcyldr(SpiceDouble x, SpiceDouble y, SpiceDouble z)"""
    return _cspyce0.dcyldr(x, y, z)

def dcyldr_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""dcyldr_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.dcyldr_vector(in11, in12, in13)

def deltet(epoch: "SpiceDouble", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""deltet(SpiceDouble epoch, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.deltet(epoch, CONST_STRING)

def deltet_vector(in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *") -> "int, int *":
    r"""deltet_vector(ConstSpiceDouble * in11, ConstSpiceChar * str1)"""
    return _cspyce0.deltet_vector(in11, str1)

def det(m1: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3]":
    r"""det(ConstSpiceDouble [3][3] m1) -> SpiceDouble"""
    return _cspyce0.det(m1)

def det_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""det_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.det_vector(in31)

def dgeodr(x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""dgeodr(SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.dgeodr(x, y, z, re, f)

def dgeodr_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""dgeodr_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.dgeodr_vector(in11, in12, in13, in14, in15)

def diags2(symmat: "ConstSpiceDouble [2][2]") -> "ConstSpiceDouble [2][2], SpiceDouble [2][2], SpiceDouble [2][2]":
    r"""diags2(ConstSpiceDouble [2][2] symmat)"""
    return _cspyce0.diags2(symmat)

def diags2_vector(in31: "ConstSpiceDouble *") -> "int *, int *":
    r"""diags2_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.diags2_vector(in31)

def dlatdr(x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""dlatdr(SpiceDouble x, SpiceDouble y, SpiceDouble z)"""
    return _cspyce0.dlatdr(x, y, z)

def dlatdr_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""dlatdr_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.dlatdr_vector(in11, in12, in13)

def dpgrdr(CONST_STRING: "ConstSpiceChar *", x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""dpgrdr(ConstSpiceChar * CONST_STRING, SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.dpgrdr(CONST_STRING, x, y, z, re, f)

def dpgrdr_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""dpgrdr_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.dpgrdr_vector(str1, in11, in12, in13, in14, in15)

def dpmax() -> "SpiceDouble":
    r"""dpmax() -> SpiceDouble"""
    return _cspyce0.dpmax()

def dpmin() -> "SpiceDouble":
    r"""dpmin() -> SpiceDouble"""
    return _cspyce0.dpmin()

def dpr() -> "SpiceDouble":
    r"""dpr() -> SpiceDouble"""
    return _cspyce0.dpr()

def drdcyl(r: "SpiceDouble", lon: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""drdcyl(SpiceDouble r, SpiceDouble lon, SpiceDouble z)"""
    return _cspyce0.drdcyl(r, lon, z)

def drdcyl_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""drdcyl_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.drdcyl_vector(in11, in12, in13)

def drdgeo(lon: "SpiceDouble", lat: "SpiceDouble", alt: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""drdgeo(SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.drdgeo(lon, lat, alt, re, f)

def drdgeo_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""drdgeo_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.drdgeo_vector(in11, in12, in13, in14, in15)

def drdlat(r: "SpiceDouble", lon: "SpiceDouble", lat: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""drdlat(SpiceDouble r, SpiceDouble lon, SpiceDouble lat)"""
    return _cspyce0.drdlat(r, lon, lat)

def drdlat_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""drdlat_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.drdlat_vector(in11, in12, in13)

def drdpgr(CONST_STRING: "ConstSpiceChar *", lon: "SpiceDouble", lat: "SpiceDouble", alt: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""drdpgr(ConstSpiceChar * CONST_STRING, SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.drdpgr(CONST_STRING, lon, lat, alt, re, f)

def drdpgr_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""drdpgr_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.drdpgr_vector(str1, in11, in12, in13, in14, in15)

def drdsph(r: "SpiceDouble", colat: "SpiceDouble", lon: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""drdsph(SpiceDouble r, SpiceDouble colat, SpiceDouble lon)"""
    return _cspyce0.drdsph(r, colat, lon)

def drdsph_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""drdsph_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.drdsph_vector(in11, in12, in13)

def dsphdr(x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""dsphdr(SpiceDouble x, SpiceDouble y, SpiceDouble z)"""
    return _cspyce0.dsphdr(x, y, z)

def dsphdr_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""dsphdr_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.dsphdr_vector(in11, in12, in13)

def dtpool(CONST_STRING: "ConstSpiceChar *") -> "SpiceBoolean *, SpiceInt *, SpiceChar [ANY]":
    r"""dtpool(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.dtpool(CONST_STRING)

def ducrss(s1: "ConstSpiceDouble [6]", s2: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], ConstSpiceDouble [6], SpiceDouble [6]":
    r"""ducrss(ConstSpiceDouble [6] s1, ConstSpiceDouble [6] s2)"""
    return _cspyce0.ducrss(s1, s2)

def ducrss_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""ducrss_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.ducrss_vector(in21, in22)

def dvcrss(s1: "ConstSpiceDouble [6]", s2: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], ConstSpiceDouble [6], SpiceDouble [6]":
    r"""dvcrss(ConstSpiceDouble [6] s1, ConstSpiceDouble [6] s2)"""
    return _cspyce0.dvcrss(s1, s2)

def dvcrss_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""dvcrss_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.dvcrss_vector(in21, in22)

def dvdot(s1: "ConstSpiceDouble [6]", s2: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], ConstSpiceDouble [6]":
    r"""dvdot(ConstSpiceDouble [6] s1, ConstSpiceDouble [6] s2) -> SpiceDouble"""
    return _cspyce0.dvdot(s1, s2)

def dvdot_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""dvdot_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.dvdot_vector(in21, in22)

def dvhat(s1: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], SpiceDouble [6]":
    r"""dvhat(ConstSpiceDouble [6] s1)"""
    return _cspyce0.dvhat(s1)

def dvhat_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""dvhat_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.dvhat_vector(in21)

def dvnorm(state: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6]":
    r"""dvnorm(ConstSpiceDouble [6] state) -> SpiceDouble"""
    return _cspyce0.dvnorm(state)

def dvnorm_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""dvnorm_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.dvnorm_vector(in21)

def dvpool(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""dvpool(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.dvpool(CONST_STRING)

def dvsep(s1: "ConstSpiceDouble [6]", s2: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], ConstSpiceDouble [6]":
    r"""dvsep(ConstSpiceDouble [6] s1, ConstSpiceDouble [6] s2) -> SpiceDouble"""
    return _cspyce0.dvsep(s1, s2)

def dvsep_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""dvsep_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.dvsep_vector(in21, in22)

def edlimb(a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble", viewpt: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [NELLIPSE]":
    r"""edlimb(SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble [3] viewpt)"""
    return _cspyce0.edlimb(a, b, c, viewpt)

def edlimb_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int, int, int, int *":
    r"""edlimb_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in21)"""
    return _cspyce0.edlimb_vector(in11, in12, in13, in21)

def edterm(trmtyp: "ConstSpiceChar *", source: "ConstSpiceChar *", target: "ConstSpiceChar *", et: "SpiceDouble", fixref: "ConstSpiceChar *", abcorr: "ConstSpiceChar *", obsrvr: "ConstSpiceChar *", npts: "SpiceInt") -> "SpiceDouble *, SpiceDouble [3], int *":
    r"""edterm(ConstSpiceChar * trmtyp, ConstSpiceChar * source, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceInt npts)"""
    return _cspyce0.edterm(trmtyp, source, target, et, fixref, abcorr, obsrvr, npts)

def el2cgv(ellipse: "ConstSpiceDouble [NELLIPSE]") -> "ConstSpiceDouble [NELLIPSE], SpiceDouble [3], SpiceDouble [3], SpiceDouble [3]":
    r"""el2cgv(ConstSpiceDouble [NELLIPSE] ellipse)"""
    return _cspyce0.el2cgv(ellipse)

def el2cgv_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""el2cgv_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.el2cgv_vector(in21)

def eqncpv(et: "SpiceDouble", epoch: "SpiceDouble", eqel: "ConstSpiceDouble [9]", rapol: "SpiceDouble", decpol: "SpiceDouble") -> "ConstSpiceDouble [9], SpiceDouble [6]":
    r"""eqncpv(SpiceDouble et, SpiceDouble epoch, ConstSpiceDouble [9] eqel, SpiceDouble rapol, SpiceDouble decpol)"""
    return _cspyce0.eqncpv(et, epoch, eqel, rapol, decpol)

def eqncpv_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""eqncpv_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in21, ConstSpiceDouble * in13, ConstSpiceDouble * in14)"""
    return _cspyce0.eqncpv_vector(in11, in12, in21, in13, in14)

def erract(op: "ConstSpiceChar *", lenout: "SpiceInt") -> "SpiceChar [256]":
    r"""erract(ConstSpiceChar * op, SpiceInt lenout)"""
    return _cspyce0.erract(op, lenout)

def errch(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *") -> "void":
    r"""errch(ConstSpiceChar * arg1, ConstSpiceChar * arg2)"""
    return _cspyce0.errch(arg1, arg2)

def errdev(CONST_STRING: "ConstSpiceChar *", lenout: "SpiceInt") -> "SpiceChar [256]":
    r"""errdev(ConstSpiceChar * CONST_STRING, SpiceInt lenout)"""
    return _cspyce0.errdev(CONST_STRING, lenout)

def errdp(CONST_STRING: "ConstSpiceChar *", number: "SpiceDouble") -> "void":
    r"""errdp(ConstSpiceChar * CONST_STRING, SpiceDouble number)"""
    return _cspyce0.errdp(CONST_STRING, number)

def errint(CONST_STRING: "ConstSpiceChar *", number: "SpiceInt") -> "void":
    r"""errint(ConstSpiceChar * CONST_STRING, SpiceInt number)"""
    return _cspyce0.errint(CONST_STRING, number)

def errprt(CONST_STRING: "ConstSpiceChar *", lenout: "SpiceInt") -> "SpiceChar [256]":
    r"""errprt(ConstSpiceChar * CONST_STRING, SpiceInt lenout)"""
    return _cspyce0.errprt(CONST_STRING, lenout)

def et2lst(et: "SpiceDouble", body: "SpiceInt", lon: "SpiceDouble", ltype: "ConstSpiceChar *") -> "SpiceInt *, SpiceInt *, SpiceInt *, SpiceChar [256], SpiceChar [10]":
    r"""et2lst(SpiceDouble et, SpiceInt body, SpiceDouble lon, ConstSpiceChar * ltype)"""
    return _cspyce0.et2lst(et, body, lon, ltype)

def et2utc(et: "SpiceDouble", CONST_STRING: "ConstSpiceChar *", prec: "SpiceInt") -> "SpiceChar [256]":
    r"""et2utc(SpiceDouble et, ConstSpiceChar * CONST_STRING, SpiceInt prec)"""
    return _cspyce0.et2utc(et, CONST_STRING, prec)

def etcal(et: "SpiceDouble") -> "SpiceChar [256]":
    r"""etcal(SpiceDouble et)"""
    return _cspyce0.etcal(et)

def eul2m(angle3: "SpiceDouble", angle2: "SpiceDouble", angle1: "SpiceDouble", axis3: "SpiceInt", axis2: "SpiceInt", axis1: "SpiceInt") -> "SpiceDouble [3][3]":
    r"""eul2m(SpiceDouble angle3, SpiceDouble angle2, SpiceDouble angle1, SpiceInt axis3, SpiceInt axis2, SpiceInt axis1)"""
    return _cspyce0.eul2m(angle3, angle2, angle1, axis3, axis2, axis1)

def eul2m_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", k1: "SpiceInt", k2: "SpiceInt", k3: "SpiceInt") -> "int, int, int, int *":
    r"""eul2m_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, SpiceInt k1, SpiceInt k2, SpiceInt k3)"""
    return _cspyce0.eul2m_vector(in11, in12, in13, k1, k2, k3)

def eul2xf(eulang: "ConstSpiceDouble [6]", axisa: "SpiceInt", axisb: "SpiceInt", axisc: "SpiceInt") -> "ConstSpiceDouble [6], SpiceDouble [6][6]":
    r"""eul2xf(ConstSpiceDouble [6] eulang, SpiceInt axisa, SpiceInt axisb, SpiceInt axisc)"""
    return _cspyce0.eul2xf(eulang, axisa, axisb, axisc)

def eul2xf_vector(in21: "ConstSpiceDouble *", k1: "SpiceInt", k2: "SpiceInt", k3: "SpiceInt") -> "int, int *":
    r"""eul2xf_vector(ConstSpiceDouble * in21, SpiceInt k1, SpiceInt k2, SpiceInt k3)"""
    return _cspyce0.eul2xf_vector(in21, k1, k2, k3)

def expool(CONST_STRING: "ConstSpiceChar *") -> "SpiceBoolean *":
    r"""expool(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.expool(CONST_STRING)

def failed() -> "SpiceBoolean":
    r"""failed() -> SpiceBoolean"""
    return _cspyce0.failed()

def fovray(inst: "ConstSpiceChar *", raydir: "ConstSpiceDouble [3]", rframe: "ConstSpiceChar *", abcorr: "ConstSpiceChar *", observer: "ConstSpiceChar *", et: "SpiceDouble", visible: "SpiceBoolean *") -> "ConstSpiceDouble [3]":
    r"""fovray(ConstSpiceChar * inst, ConstSpiceDouble [3] raydir, ConstSpiceChar * rframe, ConstSpiceChar * abcorr, ConstSpiceChar * observer, SpiceDouble et, SpiceBoolean * visible)"""
    return _cspyce0.fovray(inst, raydir, rframe, abcorr, observer, et, visible)

def fovray_vector(str1: "ConstSpiceChar *", in21: "ConstSpiceDouble *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", in11: "ConstSpiceDouble *") -> "int, int, int *":
    r"""fovray_vector(ConstSpiceChar * str1, ConstSpiceDouble * in21, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceDouble * in11)"""
    return _cspyce0.fovray_vector(str1, in21, str2, str3, str4, in11)

def fovtrg(inst: "ConstSpiceChar *", target: "ConstSpiceChar *", tshape: "ConstSpiceChar *", tframe: "ConstSpiceChar *", abcorr: "ConstSpiceChar *", observer: "ConstSpiceChar *", et: "SpiceDouble", visible: "SpiceBoolean *") -> "void":
    r"""fovtrg(ConstSpiceChar * inst, ConstSpiceChar * target, ConstSpiceChar * tshape, ConstSpiceChar * tframe, ConstSpiceChar * abcorr, ConstSpiceChar * observer, SpiceDouble et, SpiceBoolean * visible)"""
    return _cspyce0.fovtrg(inst, target, tshape, tframe, abcorr, observer, et, visible)

def fovtrg_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", str6: "ConstSpiceChar *", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""fovtrg_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceChar * str6, ConstSpiceDouble * in11)"""
    return _cspyce0.fovtrg_vector(str1, str2, str3, str4, str5, str6, in11)

def frame(xin: "SpiceDouble [3]") -> "SpiceDouble [3], SpiceDouble [3], SpiceDouble [3], SpiceDouble [3]":
    r"""frame(SpiceDouble [3] xin)"""
    return _cspyce0.frame(xin)

def frame_vector(in21: "SpiceDouble *") -> "int, int *, int *, int *":
    r"""frame_vector(SpiceDouble * in21)"""
    return _cspyce0.frame_vector(in21)

def frinfo(frcode: "SpiceInt") -> "SpiceInt *, SpiceInt *, SpiceInt *, SpiceBoolean *":
    r"""frinfo(SpiceInt frcode)"""
    return _cspyce0.frinfo(frcode)

def frmchg(frame1: "SpiceInt", frame2: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble [6][6]":
    r"""frmchg(SpiceInt frame1, SpiceInt frame2, SpiceDouble et)"""
    return _cspyce0.frmchg(frame1, frame2, et)

def frmchg_(frame1: "SpiceInt *", frame2: "SpiceInt *", et: "SpiceDouble *", xform: "SpiceDouble *") -> "void":
    r"""frmchg_(SpiceInt * frame1, SpiceInt * frame2, SpiceDouble * et, SpiceDouble * xform)"""
    return _cspyce0.frmchg_(frame1, frame2, et, xform)

def frmchg_vector(k1: "SpiceInt", k2: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""frmchg_vector(SpiceInt k1, SpiceInt k2, ConstSpiceDouble * in11)"""
    return _cspyce0.frmchg_vector(k1, k2, in11)

def frmnam(frcode: "SpiceInt") -> "SpiceChar [256]":
    r"""frmnam(SpiceInt frcode)"""
    return _cspyce0.frmnam(frcode)

def furnsh(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""furnsh(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.furnsh(CONST_STRING)

def gcpool(CONST_STRING: "ConstSpiceChar *", start: "SpiceInt") -> "char [80][256], SpiceBoolean *":
    r"""gcpool(ConstSpiceChar * CONST_STRING, SpiceInt start)"""
    return _cspyce0.gcpool(CONST_STRING, start)

def gdpool(CONST_STRING: "ConstSpiceChar *", start: "SpiceInt") -> "SpiceDouble [80], SpiceBoolean *":
    r"""gdpool(ConstSpiceChar * CONST_STRING, SpiceInt start)"""
    return _cspyce0.gdpool(CONST_STRING, start)

def georec(lon: "SpiceDouble", lat: "SpiceDouble", alt: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3]":
    r"""georec(SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.georec(lon, lat, alt, re, f)

def georec_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""georec_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.georec_vector(in11, in12, in13, in14, in15)

def getfov(instid: "SpiceInt") -> "SpiceChar [256], SpiceChar [256], SpiceDouble [3], SpiceDouble [1000][3]":
    r"""getfov(SpiceInt instid)"""
    return _cspyce0.getfov(instid)

def getmsg(option: "ConstSpiceChar *") -> "SpiceChar [10000]":
    r"""getmsg(ConstSpiceChar * option)"""
    return _cspyce0.getmsg(option)

def gipool(CONST_STRING: "ConstSpiceChar *", start: "SpiceInt") -> "SpiceInt [80], SpiceBoolean *":
    r"""gipool(ConstSpiceChar * CONST_STRING, SpiceInt start)"""
    return _cspyce0.gipool(CONST_STRING, start)

def gnpool(CONST_STRING: "ConstSpiceChar *", start: "SpiceInt") -> "char [80][256], SpiceBoolean *":
    r"""gnpool(ConstSpiceChar * CONST_STRING, SpiceInt start)"""
    return _cspyce0.gnpool(CONST_STRING, start)

def halfpi() -> "SpiceDouble":
    r"""halfpi() -> SpiceDouble"""
    return _cspyce0.halfpi()

def ident() -> "SpiceDouble [3][3]":
    r"""ident()"""
    return _cspyce0.ident()

def illum(arg1: "ConstSpiceChar *", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", spoint: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""illum(ConstSpiceChar * arg1, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceDouble [3] spoint)"""
    return _cspyce0.illum(arg1, et, arg3, arg4, spoint)

def illum_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *":
    r"""illum_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceDouble * in21)"""
    return _cspyce0.illum_vector(str1, in11, str2, str3, in21)

def illumf(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *", et: "SpiceDouble", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", arg7: "ConstSpiceChar *", spoint: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *, SpiceBoolean *, SpiceBoolean *":
    r"""illumf(ConstSpiceChar * arg1, ConstSpiceChar * arg2, ConstSpiceChar * arg3, SpiceDouble et, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceChar * arg7, ConstSpiceDouble [3] spoint)"""
    return _cspyce0.illumf(arg1, arg2, arg3, et, arg5, arg6, arg7, spoint)

def illumf_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", str6: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *, int *, int *, int *, int *":
    r"""illumf_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceDouble * in11, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceChar * str6, ConstSpiceDouble * in21)"""
    return _cspyce0.illumf_vector(str1, str2, str3, in11, str4, str5, str6, in21)

def illumg(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *", et: "SpiceDouble", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", arg7: "ConstSpiceChar *", spoint: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""illumg(ConstSpiceChar * arg1, ConstSpiceChar * arg2, ConstSpiceChar * arg3, SpiceDouble et, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceChar * arg7, ConstSpiceDouble [3] spoint)"""
    return _cspyce0.illumg(arg1, arg2, arg3, et, arg5, arg6, arg7, spoint)

def illumg_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", str6: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *, int *, int *":
    r"""illumg_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceDouble * in11, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceChar * str6, ConstSpiceDouble * in21)"""
    return _cspyce0.illumg_vector(str1, str2, str3, in11, str4, str5, str6, in21)

def ilumin(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", spoint: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""ilumin(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceDouble [3] spoint)"""
    return _cspyce0.ilumin(arg1, arg2, et, arg4, arg5, arg6, spoint)

def ilumin_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *, int *, int *":
    r"""ilumin_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceDouble * in21)"""
    return _cspyce0.ilumin_vector(str1, str2, in11, str3, str4, str5, in21)

def inedpl(a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble", plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NPLANE], SpiceDouble [NELLIPSE], SpiceBoolean *":
    r"""inedpl(SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.inedpl(a, b, c, plane)

def inedpl_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int, int, int, int *, int *":
    r"""inedpl_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in21)"""
    return _cspyce0.inedpl_vector(in11, in12, in13, in21)

def inelpl(ellipse: "ConstSpiceDouble [NELLIPSE]", plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NELLIPSE], ConstSpiceDouble [NPLANE], SpiceInt *, SpiceDouble [3], SpiceDouble [3]":
    r"""inelpl(ConstSpiceDouble [NELLIPSE] ellipse, ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.inelpl(ellipse, plane)

def inelpl_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *, int *, int *":
    r"""inelpl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.inelpl_vector(in21, in22)

def inrypl(vertex: "ConstSpiceDouble [3]", dir: "ConstSpiceDouble [3]", plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [NPLANE], SpiceInt *, SpiceDouble [3]":
    r"""inrypl(ConstSpiceDouble [3] vertex, ConstSpiceDouble [3] dir, ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.inrypl(vertex, dir, plane)

def inrypl_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int *, int *":
    r"""inrypl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23)"""
    return _cspyce0.inrypl_vector(in21, in22, in23)

def intmax() -> "SpiceInt":
    r"""intmax() -> SpiceInt"""
    return _cspyce0.intmax()

def intmin() -> "SpiceInt":
    r"""intmin() -> SpiceInt"""
    return _cspyce0.intmin()

def invert(m1: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""invert(ConstSpiceDouble [3][3] m1)"""
    return _cspyce0.invert(m1)

def invert_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""invert_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.invert_vector(in31)

def invort(m: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""invort(ConstSpiceDouble [3][3] m)"""
    return _cspyce0.invort(m)

def invort_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""invort_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.invort_vector(in31)

def isrot(m: "ConstSpiceDouble [3][3]", ntol: "SpiceDouble", dtol: "SpiceDouble") -> "ConstSpiceDouble [3][3]":
    r"""isrot(ConstSpiceDouble [3][3] m, SpiceDouble ntol, SpiceDouble dtol) -> SpiceBoolean"""
    return _cspyce0.isrot(m, ntol, dtol)

def isrot_vector(in31: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int *":
    r"""isrot_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.isrot_vector(in31, in11, in12)

def j1900() -> "SpiceDouble":
    r"""j1900() -> SpiceDouble"""
    return _cspyce0.j1900()

def j1950() -> "SpiceDouble":
    r"""j1950() -> SpiceDouble"""
    return _cspyce0.j1950()

def j2000() -> "SpiceDouble":
    r"""j2000() -> SpiceDouble"""
    return _cspyce0.j2000()

def j2100() -> "SpiceDouble":
    r"""j2100() -> SpiceDouble"""
    return _cspyce0.j2100()

def jyear() -> "SpiceDouble":
    r"""jyear() -> SpiceDouble"""
    return _cspyce0.jyear()

def kplfrm(frmcls: "SpiceInt") -> "SpiceInt *":
    r"""kplfrm(SpiceInt frmcls)"""
    return _cspyce0.kplfrm(frmcls)

def latcyl(radius: "SpiceDouble", lon: "SpiceDouble", lat: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""latcyl(SpiceDouble radius, SpiceDouble lon, SpiceDouble lat)"""
    return _cspyce0.latcyl(radius, lon, lat)

def latcyl_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""latcyl_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.latcyl_vector(in11, in12, in13)

def latrec(radius: "SpiceDouble", longitude: "SpiceDouble", latitude: "SpiceDouble") -> "SpiceDouble [3]":
    r"""latrec(SpiceDouble radius, SpiceDouble longitude, SpiceDouble latitude)"""
    return _cspyce0.latrec(radius, longitude, latitude)

def latrec_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""latrec_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.latrec_vector(in11, in12, in13)

def latsrf(method: "ConstSpiceChar *", target: "ConstSpiceChar *", et: "SpiceDouble", fixref: "ConstSpiceChar *", lonlat: "ConstSpiceDouble [][2]") -> "SpiceInt, int *":
    r"""latsrf(ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceDouble [][2] lonlat)"""
    return _cspyce0.latsrf(method, target, et, fixref, lonlat)

def latsph(radius: "SpiceDouble", lon: "SpiceDouble", lat: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""latsph(SpiceDouble radius, SpiceDouble lon, SpiceDouble lat)"""
    return _cspyce0.latsph(radius, lon, lat)

def latsph_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""latsph_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.latsph_vector(in11, in12, in13)

def ldpool(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""ldpool(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.ldpool(CONST_STRING)

def limbpt(method: "ConstSpiceChar *", target: "ConstSpiceChar *", et: "SpiceDouble", fixref: "ConstSpiceChar *", abcorr: "ConstSpiceChar *", corloc: "ConstSpiceChar *", obsrvr: "ConstSpiceChar *", refvec: "ConstSpiceDouble [3]", rolstp: "SpiceDouble", ncuts: "SpiceInt", schstp: "SpiceDouble", soltol: "SpiceDouble", maxn: "SpiceInt") -> "ConstSpiceDouble [3], SpiceInt *, int *, int *, int *":
    r"""limbpt(ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * corloc, ConstSpiceChar * obsrvr, ConstSpiceDouble [3] refvec, SpiceDouble rolstp, SpiceInt ncuts, SpiceDouble schstp, SpiceDouble soltol, SpiceInt maxn)"""
    return _cspyce0.limbpt(method, target, et, fixref, abcorr, corloc, obsrvr, refvec, rolstp, ncuts, schstp, soltol, maxn)

def lspcn(arg1: "ConstSpiceChar *", et: "SpiceDouble", arg3: "ConstSpiceChar *") -> "SpiceDouble":
    r"""lspcn(ConstSpiceChar * arg1, SpiceDouble et, ConstSpiceChar * arg3) -> SpiceDouble"""
    return _cspyce0.lspcn(arg1, et, arg3)

def lspcn_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str2: "ConstSpiceChar *") -> "int, int *":
    r"""lspcn_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceChar * str2)"""
    return _cspyce0.lspcn_vector(str1, in11, str2)

def ltime(etobs: "SpiceDouble", obs: "SpiceInt", CONST_STRING: "ConstSpiceChar *", targ: "SpiceInt") -> "SpiceDouble *, SpiceDouble *":
    r"""ltime(SpiceDouble etobs, SpiceInt obs, ConstSpiceChar * CONST_STRING, SpiceInt targ)"""
    return _cspyce0.ltime(etobs, obs, CONST_STRING, targ)

def ltime_vector(in11: "ConstSpiceDouble *", k1: "SpiceInt", str1: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *":
    r"""ltime_vector(ConstSpiceDouble * in11, SpiceInt k1, ConstSpiceChar * str1, SpiceInt k2)"""
    return _cspyce0.ltime_vector(in11, k1, str1, k2)

def m2eul(rin: "ConstSpiceDouble [3][3]", axis3: "SpiceInt", axis2: "SpiceInt", axis1: "SpiceInt") -> "ConstSpiceDouble [3][3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""m2eul(ConstSpiceDouble [3][3] rin, SpiceInt axis3, SpiceInt axis2, SpiceInt axis1)"""
    return _cspyce0.m2eul(rin, axis3, axis2, axis1)

def m2eul_vector(in31: "ConstSpiceDouble *", k1: "SpiceInt", k2: "SpiceInt", k3: "SpiceInt") -> "int *, int *, int *":
    r"""m2eul_vector(ConstSpiceDouble * in31, SpiceInt k1, SpiceInt k2, SpiceInt k3)"""
    return _cspyce0.m2eul_vector(in31, k1, k2, k3)

def m2q(rin: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [4]":
    r"""m2q(ConstSpiceDouble [3][3] rin)"""
    return _cspyce0.m2q(rin)

def m2q_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""m2q_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.m2q_vector(in31)

def mequ(m1: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""mequ(ConstSpiceDouble [3][3] m1)"""
    return _cspyce0.mequ(m1)

def mequ_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""mequ_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.mequ_vector(in31)

def mequg(m1: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""mequg(ConstSpiceDouble * m1)"""
    return _cspyce0.mequg(m1)

def my_mequg_nomalloc(m1: "ConstSpiceDouble *", mout: "SpiceDouble *", nr_out: "int *", nc_out: "int *") -> "SpiceInt":
    r"""my_mequg_nomalloc(ConstSpiceDouble * m1, SpiceDouble * mout, int * nr_out, int * nc_out)"""
    return _cspyce0.my_mequg_nomalloc(m1, mout, nr_out, nc_out)

def mequg_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""mequg_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.mequg_vector(in31)

def mtxm(m1: "ConstSpiceDouble [3][3]", m2: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""mtxm(ConstSpiceDouble [3][3] m1, ConstSpiceDouble [3][3] m2)"""
    return _cspyce0.mtxm(m1, m2)

def mtxm_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mtxm_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mtxm_vector(in31, in32)

def mtxmg(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *") -> "SpiceInt, SpiceInt, int *":
    r"""mtxmg(ConstSpiceDouble * m1, ConstSpiceDouble * m2)"""
    return _cspyce0.mtxmg(m1, m2)

def my_mtxmg_nomalloc(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *", m3: "SpiceDouble *", nr3: "int *", nc3: "int *") -> "SpiceInt, SpiceInt":
    r"""my_mtxmg_nomalloc(ConstSpiceDouble * m1, ConstSpiceDouble * m2, SpiceDouble * m3, int * nr3, int * nc3)"""
    return _cspyce0.my_mtxmg_nomalloc(m1, m2, m3, nr3, nc3)

def mtxmg_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mtxmg_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mtxmg_vector(in31, in32)

def mtxv(m1: "ConstSpiceDouble [3][3]", vin: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""mtxv(ConstSpiceDouble [3][3] m1, ConstSpiceDouble [3] vin)"""
    return _cspyce0.mtxv(m1, vin)

def mtxv_vector(in31: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int *":
    r"""mtxv_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in21)"""
    return _cspyce0.mtxv_vector(in31, in21)

def mtxvg(m1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, SpiceInt, int *":
    r"""mtxvg(ConstSpiceDouble * m1, ConstSpiceDouble * v2)"""
    return _cspyce0.mtxvg(m1, v2)

def my_mtxvg_nomalloc(m1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *", v3: "SpiceDouble *", nr3: "int *") -> "SpiceInt, SpiceInt":
    r"""my_mtxvg_nomalloc(ConstSpiceDouble * m1, ConstSpiceDouble * v2, SpiceDouble * v3, int * nr3)"""
    return _cspyce0.my_mtxvg_nomalloc(m1, v2, v3, nr3)

def mtxvg_vector(in31: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int *":
    r"""mtxvg_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in21)"""
    return _cspyce0.mtxvg_vector(in31, in21)

def mxm(m1: "ConstSpiceDouble [3][3]", m2: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""mxm(ConstSpiceDouble [3][3] m1, ConstSpiceDouble [3][3] m2)"""
    return _cspyce0.mxm(m1, m2)

def mxm_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mxm_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mxm_vector(in31, in32)

def mxmg(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *") -> "SpiceInt, SpiceInt, int *":
    r"""mxmg(ConstSpiceDouble * m1, ConstSpiceDouble * m2)"""
    return _cspyce0.mxmg(m1, m2)

def my_mxmg_nomalloc(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *", m3: "SpiceDouble *", nr3: "int *", nc3: "int *") -> "SpiceInt, SpiceInt":
    r"""my_mxmg_nomalloc(ConstSpiceDouble * m1, ConstSpiceDouble * m2, SpiceDouble * m3, int * nr3, int * nc3)"""
    return _cspyce0.my_mxmg_nomalloc(m1, m2, m3, nr3, nc3)

def mxmg_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mxmg_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mxmg_vector(in31, in32)

def mxmt(m1: "ConstSpiceDouble [3][3]", m2: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""mxmt(ConstSpiceDouble [3][3] m1, ConstSpiceDouble [3][3] m2)"""
    return _cspyce0.mxmt(m1, m2)

def mxmt_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mxmt_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mxmt_vector(in31, in32)

def mxmtg(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *") -> "SpiceInt, SpiceInt, int *":
    r"""mxmtg(ConstSpiceDouble * m1, ConstSpiceDouble * m2)"""
    return _cspyce0.mxmtg(m1, m2)

def my_mxmtg_nomalloc(m1: "ConstSpiceDouble *", m2: "ConstSpiceDouble *", m3: "SpiceDouble *", nr3: "int *", nc3: "int *") -> "SpiceInt, SpiceInt":
    r"""my_mxmtg_nomalloc(ConstSpiceDouble * m1, ConstSpiceDouble * m2, SpiceDouble * m3, int * nr3, int * nc3)"""
    return _cspyce0.my_mxmtg_nomalloc(m1, m2, m3, nr3, nc3)

def mxmtg_vector(in31: "ConstSpiceDouble *", in32: "ConstSpiceDouble *") -> "int *":
    r"""mxmtg_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in32)"""
    return _cspyce0.mxmtg_vector(in31, in32)

def mxv(m1: "ConstSpiceDouble [3][3]", vin: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""mxv(ConstSpiceDouble [3][3] m1, ConstSpiceDouble [3] vin)"""
    return _cspyce0.mxv(m1, vin)

def mxv_vector(in31: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int *":
    r"""mxv_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in21)"""
    return _cspyce0.mxv_vector(in31, in21)

def mxvg(m1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, SpiceInt, int *":
    r"""mxvg(ConstSpiceDouble * m1, ConstSpiceDouble * v2)"""
    return _cspyce0.mxvg(m1, v2)

def my_mxvg_nomalloc(m1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *", v3: "SpiceDouble *", nr3: "int *") -> "SpiceInt, SpiceInt":
    r"""my_mxvg_nomalloc(ConstSpiceDouble * m1, ConstSpiceDouble * v2, SpiceDouble * v3, int * nr3)"""
    return _cspyce0.my_mxvg_nomalloc(m1, v2, v3, nr3)

def mxvg_vector(in31: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int *":
    r"""mxvg_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in21)"""
    return _cspyce0.mxvg_vector(in31, in21)

def namfrm(CONST_STRING: "ConstSpiceChar *") -> "SpiceInt *":
    r"""namfrm(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.namfrm(CONST_STRING)

def nearpt(positn: "ConstSpiceDouble [3]", a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble") -> "ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *":
    r"""nearpt(ConstSpiceDouble [3] positn, SpiceDouble a, SpiceDouble b, SpiceDouble c)"""
    return _cspyce0.nearpt(positn, a, b, c)

def nearpt_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int, int *, int *":
    r"""nearpt_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.nearpt_vector(in21, in11, in12, in13)

def npedln(a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble", linept: "ConstSpiceDouble [3]", linedr: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *":
    r"""npedln(SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble [3] linept, ConstSpiceDouble [3] linedr)"""
    return _cspyce0.npedln(a, b, c, linept, linedr)

def npedln_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int, int, int, int *, int *":
    r"""npedln_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.npedln_vector(in11, in12, in13, in21, in22)

def npelpt(point: "ConstSpiceDouble [3]", ellipse: "ConstSpiceDouble [NELLIPSE]") -> "ConstSpiceDouble [3], ConstSpiceDouble [NELLIPSE], SpiceDouble [3], SpiceDouble *":
    r"""npelpt(ConstSpiceDouble [3] point, ConstSpiceDouble [NELLIPSE] ellipse)"""
    return _cspyce0.npelpt(point, ellipse)

def npelpt_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *, int *":
    r"""npelpt_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.npelpt_vector(in21, in22)

def nplnpt(linpt: "ConstSpiceDouble [3]", lindir: "ConstSpiceDouble [3]", point: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *":
    r"""nplnpt(ConstSpiceDouble [3] linpt, ConstSpiceDouble [3] lindir, ConstSpiceDouble [3] point)"""
    return _cspyce0.nplnpt(linpt, lindir, point)

def nplnpt_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int *, int *":
    r"""nplnpt_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23)"""
    return _cspyce0.nplnpt_vector(in21, in22, in23)

def nvc2pl(normal: "ConstSpiceDouble [3]", constant: "SpiceDouble") -> "ConstSpiceDouble [3], SpiceDouble [NPLANE]":
    r"""nvc2pl(ConstSpiceDouble [3] normal, SpiceDouble constant)"""
    return _cspyce0.nvc2pl(normal, constant)

def nvc2pl_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *") -> "int, int, int *":
    r"""nvc2pl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11)"""
    return _cspyce0.nvc2pl_vector(in21, in11)

def nvp2pl(normal: "ConstSpiceDouble [3]", point: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [NPLANE]":
    r"""nvp2pl(ConstSpiceDouble [3] normal, ConstSpiceDouble [3] point)"""
    return _cspyce0.nvp2pl(normal, point)

def nvp2pl_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""nvp2pl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.nvp2pl_vector(in21, in22)

def occult(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", arg7: "ConstSpiceChar *", arg8: "ConstSpiceChar *", et: "SpiceDouble") -> "SpiceInt *":
    r"""occult(ConstSpiceChar * arg1, ConstSpiceChar * arg2, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceChar * arg7, ConstSpiceChar * arg8, SpiceDouble et)"""
    return _cspyce0.occult(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, et)

def occult_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", str6: "ConstSpiceChar *", str7: "ConstSpiceChar *", str8: "ConstSpiceChar *", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""occult_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceChar * str6, ConstSpiceChar * str7, ConstSpiceChar * str8, ConstSpiceDouble * in11)"""
    return _cspyce0.occult_vector(str1, str2, str3, str4, str5, str6, str7, str8, in11)

def oscelt(state: "ConstSpiceDouble [6]", et: "SpiceDouble", mu: "SpiceDouble") -> "ConstSpiceDouble [6], SpiceDouble [8]":
    r"""oscelt(ConstSpiceDouble [6] state, SpiceDouble et, SpiceDouble mu)"""
    return _cspyce0.oscelt(state, et, mu)

def oscelt_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""oscelt_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.oscelt_vector(in21, in11, in12)

def oscltx(state: "ConstSpiceDouble [6]", et: "SpiceDouble", mu: "SpiceDouble") -> "ConstSpiceDouble [6], SpiceDouble [SPICE_OSCLTX_NELTS]":
    r"""oscltx(ConstSpiceDouble [6] state, SpiceDouble et, SpiceDouble mu)"""
    return _cspyce0.oscltx(state, et, mu)

def oscltx_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""oscltx_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.oscltx_vector(in21, in11, in12)

def pckcov(pck: "ConstSpiceChar *", idcode: "SpiceInt") -> "int *":
    r"""pckcov(ConstSpiceChar * pck, SpiceInt idcode)"""
    return _cspyce0.pckcov(pck, idcode)

def pckfrm(pck: "ConstSpiceChar *") -> "int *":
    r"""pckfrm(ConstSpiceChar * pck)"""
    return _cspyce0.pckfrm(pck)

def pcpool(CONST_STRING: "ConstSpiceChar *", n: "SpiceInt") -> "void":
    r"""pcpool(ConstSpiceChar * CONST_STRING, SpiceInt n)"""
    return _cspyce0.pcpool(CONST_STRING, n)

def pdpool(CONST_STRING: "ConstSpiceChar *", n: "SpiceInt") -> "ConstSpiceDouble *":
    r"""pdpool(ConstSpiceChar * CONST_STRING, SpiceInt n)"""
    return _cspyce0.pdpool(CONST_STRING, n)

def pgrrec(CONST_STRING: "ConstSpiceChar *", lon: "SpiceDouble", lat: "SpiceDouble", alt: "SpiceDouble", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3]":
    r"""pgrrec(ConstSpiceChar * CONST_STRING, SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.pgrrec(CONST_STRING, lon, lat, alt, re, f)

def pgrrec_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in14: "ConstSpiceDouble *", in15: "ConstSpiceDouble *") -> "int, int, int, int, int, int *":
    r"""pgrrec_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13, ConstSpiceDouble * in14, ConstSpiceDouble * in15)"""
    return _cspyce0.pgrrec_vector(str1, in11, in12, in13, in14, in15)

def phaseq(et: "SpiceDouble", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *") -> "SpiceDouble":
    r"""phaseq(SpiceDouble et, ConstSpiceChar * arg2, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceChar * arg5) -> SpiceDouble"""
    return _cspyce0.phaseq(et, arg2, arg3, arg4, arg5)

def phaseq_vector(in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *") -> "int, int *":
    r"""phaseq_vector(ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4)"""
    return _cspyce0.phaseq_vector(in11, str1, str2, str3, str4)

def pi() -> "SpiceDouble":
    r"""pi() -> SpiceDouble"""
    return _cspyce0.pi()

def pipool(CONST_STRING: "ConstSpiceChar *", n: "SpiceInt") -> "ConstSpiceInt *":
    r"""pipool(ConstSpiceChar * CONST_STRING, SpiceInt n)"""
    return _cspyce0.pipool(CONST_STRING, n)

def pjelpl(elin: "ConstSpiceDouble [NELLIPSE]", plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NELLIPSE], ConstSpiceDouble [NPLANE], SpiceDouble [NELLIPSE]":
    r"""pjelpl(ConstSpiceDouble [NELLIPSE] elin, ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.pjelpl(elin, plane)

def pjelpl_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""pjelpl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.pjelpl_vector(in21, in22)

def pltar(nv: "SpiceInt", np: "SpiceInt") -> "ConstSpiceDouble [][3], ConstSpiceInt [][3]":
    r"""pltar(SpiceInt nv, SpiceInt np) -> SpiceDouble"""
    return _cspyce0.pltar(nv, np)

def pltexp(iverts: "ConstSpiceDouble [3][3]", delta: "SpiceDouble") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""pltexp(ConstSpiceDouble [3][3] iverts, SpiceDouble delta)"""
    return _cspyce0.pltexp(iverts, delta)

def pltexp_vector(in31: "ConstSpiceDouble *", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""pltexp_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in11)"""
    return _cspyce0.pltexp_vector(in31, in11)

def pltnp(point: "ConstSpiceDouble [3]", v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]", v3: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *":
    r"""pltnp(ConstSpiceDouble [3] point, ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2, ConstSpiceDouble [3] v3)"""
    return _cspyce0.pltnp(point, v1, v2, v3)

def pltnp_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *", in24: "ConstSpiceDouble *") -> "int, int, int, int, int *, int *":
    r"""pltnp_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23, ConstSpiceDouble * in24)"""
    return _cspyce0.pltnp_vector(in21, in22, in23, in24)

def pltvol(nv: "SpiceInt", np: "SpiceInt") -> "ConstSpiceDouble [][3], ConstSpiceInt [][3]":
    r"""pltvol(SpiceInt nv, SpiceInt np) -> SpiceDouble"""
    return _cspyce0.pltvol(nv, np)

def pl2nvc(plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NPLANE], SpiceDouble [3], SpiceDouble *":
    r"""pl2nvc(ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.pl2nvc(plane)

def pl2nvc_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *":
    r"""pl2nvc_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.pl2nvc_vector(in21)

def pl2nvp(plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NPLANE], SpiceDouble [3], SpiceDouble [3]":
    r"""pl2nvp(ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.pl2nvp(plane)

def pl2nvp_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *":
    r"""pl2nvp_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.pl2nvp_vector(in21)

def pl2psv(plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [NPLANE], SpiceDouble [3], SpiceDouble [3], SpiceDouble [3]":
    r"""pl2psv(ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.pl2psv(plane)

def pl2psv_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""pl2psv_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.pl2psv_vector(in21)

def prop2b(gm: "SpiceDouble", pvinit: "ConstSpiceDouble [6]", dt: "SpiceDouble") -> "ConstSpiceDouble [6], SpiceDouble [6]":
    r"""prop2b(SpiceDouble gm, ConstSpiceDouble [6] pvinit, SpiceDouble dt)"""
    return _cspyce0.prop2b(gm, pvinit, dt)

def prop2b_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""prop2b_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21, ConstSpiceDouble * in12)"""
    return _cspyce0.prop2b_vector(in11, in21, in12)

def psv2pl(point: "ConstSpiceDouble [3]", span1: "ConstSpiceDouble [3]", span2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [NPLANE]":
    r"""psv2pl(ConstSpiceDouble [3] point, ConstSpiceDouble [3] span1, ConstSpiceDouble [3] span2)"""
    return _cspyce0.psv2pl(point, span1, span2)

def psv2pl_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""psv2pl_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23)"""
    return _cspyce0.psv2pl_vector(in21, in22, in23)

def pxform(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""pxform(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et)"""
    return _cspyce0.pxform(arg1, arg2, et)

def pxform_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""pxform_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11)"""
    return _cspyce0.pxform_vector(str1, str2, in11)

def pxfrm2(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", etfrom: "SpiceDouble", et2: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""pxfrm2(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble etfrom, SpiceDouble et2)"""
    return _cspyce0.pxfrm2(arg1, arg2, etfrom, et2)

def pxfrm2_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int *":
    r"""pxfrm2_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.pxfrm2_vector(str1, str2, in11, in12)

def q2m(qin: "ConstSpiceDouble [4]") -> "ConstSpiceDouble [4], SpiceDouble [3][3]":
    r"""q2m(ConstSpiceDouble [4] qin)"""
    return _cspyce0.q2m(qin)

def q2m_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""q2m_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.q2m_vector(in21)

def qcktrc() -> "SpiceChar [1000]":
    r"""qcktrc()"""
    return _cspyce0.qcktrc()

def qdq2av(qin: "ConstSpiceDouble [4]", dq: "ConstSpiceDouble [4]") -> "ConstSpiceDouble [4], ConstSpiceDouble [4], SpiceDouble [3]":
    r"""qdq2av(ConstSpiceDouble [4] qin, ConstSpiceDouble [4] dq)"""
    return _cspyce0.qdq2av(qin, dq)

def qdq2av_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""qdq2av_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.qdq2av_vector(in21, in22)

def qxq(q1: "ConstSpiceDouble [4]", q2: "ConstSpiceDouble [4]") -> "ConstSpiceDouble [4], ConstSpiceDouble [4], SpiceDouble [4]":
    r"""qxq(ConstSpiceDouble [4] q1, ConstSpiceDouble [4] q2)"""
    return _cspyce0.qxq(q1, q2)

def qxq_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""qxq_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.qxq_vector(in21, in22)

def radrec(range: "SpiceDouble", ra: "SpiceDouble", dec: "SpiceDouble") -> "SpiceDouble [3]":
    r"""radrec(SpiceDouble range, SpiceDouble ra, SpiceDouble dec)"""
    return _cspyce0.radrec(range, ra, dec)

def radrec_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""radrec_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.radrec_vector(in11, in12, in13)

def rav2xf(rot: "ConstSpiceDouble [3][3]", av: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3][3], ConstSpiceDouble [3], SpiceDouble [6][6]":
    r"""rav2xf(ConstSpiceDouble [3][3] rot, ConstSpiceDouble [3] av)"""
    return _cspyce0.rav2xf(rot, av)

def rav2xf_vector(in31: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int *":
    r"""rav2xf_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in21)"""
    return _cspyce0.rav2xf_vector(in31, in21)

def raxisa(matrix: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [3], SpiceDouble *":
    r"""raxisa(ConstSpiceDouble [3][3] matrix)"""
    return _cspyce0.raxisa(matrix)

def raxisa_vector(in31: "ConstSpiceDouble *") -> "int *, int *":
    r"""raxisa_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.raxisa_vector(in31)

def reccyl(rectan1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""reccyl(ConstSpiceDouble [3] rectan1)"""
    return _cspyce0.reccyl(rectan1)

def reccyl_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""reccyl_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.reccyl_vector(in21)

def recgeo(rectan1: "ConstSpiceDouble [3]", re: "SpiceDouble", f: "SpiceDouble") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""recgeo(ConstSpiceDouble [3] rectan1, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.recgeo(rectan1, re, f)

def recgeo_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""recgeo_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.recgeo_vector(in21, in11, in12)

def reclat(rectan1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""reclat(ConstSpiceDouble [3] rectan1)"""
    return _cspyce0.reclat(rectan1)

def reclat_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""reclat_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.reclat_vector(in21)

def recpgr(CONST_STRING: "ConstSpiceChar *", rectan1: "SpiceDouble [3]", re: "SpiceDouble", f: "SpiceDouble") -> "SpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""recpgr(ConstSpiceChar * CONST_STRING, SpiceDouble [3] rectan1, SpiceDouble re, SpiceDouble f)"""
    return _cspyce0.recpgr(CONST_STRING, rectan1, re, f)

def recpgr_vector(str1: "ConstSpiceChar *", in21: "SpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""recpgr_vector(ConstSpiceChar * str1, SpiceDouble * in21, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.recpgr_vector(str1, in21, in11, in12)

def recrad(rectan: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""recrad(ConstSpiceDouble [3] rectan)"""
    return _cspyce0.recrad(rectan)

def recrad_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""recrad_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.recrad_vector(in21)

def recsph(rectan: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""recsph(ConstSpiceDouble [3] rectan)"""
    return _cspyce0.recsph(rectan)

def recsph_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""recsph_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.recsph_vector(in21)

def refchg(frame1: "SpiceInt", frame2: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""refchg(SpiceInt frame1, SpiceInt frame2, SpiceDouble et)"""
    return _cspyce0.refchg(frame1, frame2, et)

def refchg_(frame1: "SpiceInt *", frame2: "SpiceInt *", et: "SpiceDouble *", rotate: "SpiceDouble *") -> "void":
    r"""refchg_(SpiceInt * frame1, SpiceInt * frame2, SpiceDouble * et, SpiceDouble * rotate)"""
    return _cspyce0.refchg_(frame1, frame2, et, rotate)

def refchg_vector(k1: "SpiceInt", k2: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""refchg_vector(SpiceInt k1, SpiceInt k2, ConstSpiceDouble * in11)"""
    return _cspyce0.refchg_vector(k1, k2, in11)

def repmc(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *") -> "SpiceChar [1024]":
    r"""repmc(ConstSpiceChar * arg1, ConstSpiceChar * arg2, ConstSpiceChar * arg3)"""
    return _cspyce0.repmc(arg1, arg2, arg3)

def repmct(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", value: "SpiceInt", IN_STRING: "SpiceChar") -> "SpiceChar, SpiceChar [1024]":
    r"""repmct(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceInt value, SpiceChar IN_STRING)"""
    return _cspyce0.repmct(arg1, arg2, value, IN_STRING)

def repmd(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", value: "SpiceDouble", sigdig: "SpiceInt") -> "SpiceChar [1024]":
    r"""repmd(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble value, SpiceInt sigdig)"""
    return _cspyce0.repmd(arg1, arg2, value, sigdig)

def repmf(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", value: "SpiceDouble", sigdig: "SpiceInt", format: "SpiceChar") -> "SpiceChar, SpiceChar [1024]":
    r"""repmf(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble value, SpiceInt sigdig, SpiceChar format)"""
    return _cspyce0.repmf(arg1, arg2, value, sigdig, format)

def repmi(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", value: "SpiceInt") -> "SpiceChar [1024]":
    r"""repmi(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceInt value)"""
    return _cspyce0.repmi(arg1, arg2, value)

def repmot(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", value: "SpiceInt", IN_STRING: "SpiceChar") -> "SpiceChar, SpiceChar [1024]":
    r"""repmot(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceInt value, SpiceChar IN_STRING)"""
    return _cspyce0.repmot(arg1, arg2, value, IN_STRING)

def reset() -> "void":
    r"""reset()"""
    return _cspyce0.reset()

def rotate(angle: "SpiceDouble", iaxis: "SpiceInt") -> "SpiceDouble [3][3]":
    r"""rotate(SpiceDouble angle, SpiceInt iaxis)"""
    return _cspyce0.rotate(angle, iaxis)

def rotate_vector(in11: "ConstSpiceDouble *", k1: "SpiceInt") -> "int, int *":
    r"""rotate_vector(ConstSpiceDouble * in11, SpiceInt k1)"""
    return _cspyce0.rotate_vector(in11, k1)

def rotmat(m1: "ConstSpiceDouble [3][3]", angle: "SpiceDouble", iaxis: "SpiceInt") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""rotmat(ConstSpiceDouble [3][3] m1, SpiceDouble angle, SpiceInt iaxis)"""
    return _cspyce0.rotmat(m1, angle, iaxis)

def rotmat_vector(in31: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", k1: "SpiceInt") -> "int, int *":
    r"""rotmat_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in11, SpiceInt k1)"""
    return _cspyce0.rotmat_vector(in31, in11, k1)

def rotvec(v1: "ConstSpiceDouble [3]", angle: "SpiceDouble", iaxis: "SpiceInt") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""rotvec(ConstSpiceDouble [3] v1, SpiceDouble angle, SpiceInt iaxis)"""
    return _cspyce0.rotvec(v1, angle, iaxis)

def rotvec_vector(in21: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", k1: "SpiceInt") -> "int, int, int *":
    r"""rotvec_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in11, SpiceInt k1)"""
    return _cspyce0.rotvec_vector(in21, in11, k1)

def rpd() -> "SpiceDouble":
    r"""rpd() -> SpiceDouble"""
    return _cspyce0.rpd()

def rquad(a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble") -> "SpiceDouble [2], SpiceDouble [2]":
    r"""rquad(SpiceDouble a, SpiceDouble b, SpiceDouble c)"""
    return _cspyce0.rquad(a, b, c)

def rquad_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *":
    r"""rquad_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.rquad_vector(in11, in12, in13)

def saelgv(vec1: "ConstSpiceDouble [3]", vec2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble [3]":
    r"""saelgv(ConstSpiceDouble [3] vec1, ConstSpiceDouble [3] vec2)"""
    return _cspyce0.saelgv(vec1, vec2)

def saelgv_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *, int *":
    r"""saelgv_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.saelgv_vector(in21, in22)

def scdecd(sc: "SpiceInt", sclkdp: "SpiceDouble") -> "SpiceChar [256]":
    r"""scdecd(SpiceInt sc, SpiceDouble sclkdp)"""
    return _cspyce0.scdecd(sc, sclkdp)

def sce2c(sc: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble *":
    r"""sce2c(SpiceInt sc, SpiceDouble et)"""
    return _cspyce0.sce2c(sc, et)

def sce2c_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""sce2c_vector(SpiceInt k1, ConstSpiceDouble * in11)"""
    return _cspyce0.sce2c_vector(k1, in11)

def sce2s(sc: "SpiceInt", et: "SpiceDouble") -> "SpiceChar [256]":
    r"""sce2s(SpiceInt sc, SpiceDouble et)"""
    return _cspyce0.sce2s(sc, et)

def sce2t(sc: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble *":
    r"""sce2t(SpiceInt sc, SpiceDouble et)"""
    return _cspyce0.sce2t(sc, et)

def sce2t_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""sce2t_vector(SpiceInt k1, ConstSpiceDouble * in11)"""
    return _cspyce0.sce2t_vector(k1, in11)

def scencd(sc: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""scencd(SpiceInt sc, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.scencd(sc, CONST_STRING)

def scfmt(sc: "SpiceInt", ticks: "SpiceDouble") -> "SpiceChar [256]":
    r"""scfmt(SpiceInt sc, SpiceDouble ticks)"""
    return _cspyce0.scfmt(sc, ticks)

def scpart(sc: "SpiceInt") -> "SpiceInt *":
    r"""scpart(SpiceInt sc)"""
    return _cspyce0.scpart(sc)

def scs2e(sc: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""scs2e(SpiceInt sc, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.scs2e(sc, CONST_STRING)

def sct2e(sc: "SpiceInt", sclkdp: "SpiceDouble") -> "SpiceDouble *":
    r"""sct2e(SpiceInt sc, SpiceDouble sclkdp)"""
    return _cspyce0.sct2e(sc, sclkdp)

def sct2e_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""sct2e_vector(SpiceInt k1, ConstSpiceDouble * in11)"""
    return _cspyce0.sct2e_vector(k1, in11)

def sctiks(sc: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""sctiks(SpiceInt sc, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.sctiks(sc, CONST_STRING)

def setmsg(message: "ConstSpiceChar *") -> "void":
    r"""setmsg(ConstSpiceChar * message)"""
    return _cspyce0.setmsg(message)

def sigerr(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""sigerr(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.sigerr(CONST_STRING)

def sincpt(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", arg7: "ConstSpiceChar *", dvec: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *, SpiceDouble [3], SpiceBoolean *":
    r"""sincpt(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceChar * arg7, ConstSpiceDouble [3] dvec)"""
    return _cspyce0.sincpt(arg1, arg2, et, arg4, arg5, arg6, arg7, dvec)

def sincpt_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", str6: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *, int *":
    r"""sincpt_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceChar * str6, ConstSpiceDouble * in21)"""
    return _cspyce0.sincpt_vector(str1, str2, in11, str3, str4, str5, str6, in21)

def spd() -> "SpiceDouble":
    r"""spd() -> SpiceDouble"""
    return _cspyce0.spd()

def sphcyl(radius: "SpiceDouble", colat: "SpiceDouble", slon: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""sphcyl(SpiceDouble radius, SpiceDouble colat, SpiceDouble slon)"""
    return _cspyce0.sphcyl(radius, colat, slon)

def sphcyl_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""sphcyl_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.sphcyl_vector(in11, in12, in13)

def sphlat(r: "SpiceDouble", colat: "SpiceDouble", lons: "SpiceDouble") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""sphlat(SpiceDouble r, SpiceDouble colat, SpiceDouble lons)"""
    return _cspyce0.sphlat(r, colat, lons)

def sphlat_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""sphlat_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.sphlat_vector(in11, in12, in13)

def sphrec(r: "SpiceDouble", colat: "SpiceDouble", lon: "SpiceDouble") -> "SpiceDouble [3]":
    r"""sphrec(SpiceDouble r, SpiceDouble colat, SpiceDouble lon)"""
    return _cspyce0.sphrec(r, colat, lon)

def sphrec_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""sphrec_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.sphrec_vector(in11, in12, in13)

def spkacs(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", obs: "SpiceInt") -> "SpiceDouble [6], SpiceDouble *, SpiceDouble *":
    r"""spkacs(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, SpiceInt obs)"""
    return _cspyce0.spkacs(targ, et, arg3, arg4, obs)

def spkacs_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *, int *":
    r"""spkacs_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, SpiceInt k2)"""
    return _cspyce0.spkacs_vector(k1, in11, str1, str2, k2)

def spkapo(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", sobs: "ConstSpiceDouble [6]", arg5: "ConstSpiceChar *") -> "ConstSpiceDouble [6], SpiceDouble [3], SpiceDouble *":
    r"""spkapo(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceDouble [6] sobs, ConstSpiceChar * arg5)"""
    return _cspyce0.spkapo(targ, et, arg3, sobs, arg5)

def spkapo_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", in21: "ConstSpiceDouble *", str2: "ConstSpiceChar *") -> "int, int, int *, int *":
    r"""spkapo_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceDouble * in21, ConstSpiceChar * str2)"""
    return _cspyce0.spkapo_vector(k1, in11, str1, in21, str2)

def spkapp(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", sobs: "ConstSpiceDouble [6]", arg5: "ConstSpiceChar *") -> "ConstSpiceDouble [6], SpiceDouble [6], SpiceDouble *":
    r"""spkapp(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceDouble [6] sobs, ConstSpiceChar * arg5)"""
    return _cspyce0.spkapp(targ, et, arg3, sobs, arg5)

def spkapp_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", in21: "ConstSpiceDouble *", str2: "ConstSpiceChar *") -> "int, int, int *, int *":
    r"""spkapp_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceDouble * in21, ConstSpiceChar * str2)"""
    return _cspyce0.spkapp_vector(k1, in11, str1, in21, str2)

def spkaps(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", stobs: "ConstSpiceDouble [6]", accobs: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [6], ConstSpiceDouble [3], SpiceDouble [6], SpiceDouble *, SpiceDouble *":
    r"""spkaps(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceDouble [6] stobs, ConstSpiceDouble [3] accobs)"""
    return _cspyce0.spkaps(targ, et, arg3, arg4, stobs, accobs)

def spkaps_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int, int *, int *, int *":
    r"""spkaps_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.spkaps_vector(k1, in11, str1, str2, in21, in22)

def spkcov(spk: "ConstSpiceChar *", idcode: "SpiceInt") -> "int *":
    r"""spkcov(ConstSpiceChar * spk, SpiceInt idcode)"""
    return _cspyce0.spkcov(spk, idcode)

def spkez(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", obs: "SpiceInt") -> "SpiceDouble [6], SpiceDouble *":
    r"""spkez(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, SpiceInt obs)"""
    return _cspyce0.spkez(targ, et, arg3, arg4, obs)

def spkez_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *":
    r"""spkez_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, SpiceInt k2)"""
    return _cspyce0.spkez_vector(k1, in11, str1, str2, k2)

def spkezp(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", obs: "SpiceInt") -> "SpiceDouble [3], SpiceDouble *":
    r"""spkezp(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, SpiceInt obs)"""
    return _cspyce0.spkezp(targ, et, arg3, arg4, obs)

def spkezp_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *":
    r"""spkezp_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, SpiceInt k2)"""
    return _cspyce0.spkezp_vector(k1, in11, str1, str2, k2)

def spkezr(arg1: "ConstSpiceChar *", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *") -> "SpiceDouble [6], SpiceDouble *":
    r"""spkezr(ConstSpiceChar * arg1, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceChar * arg5)"""
    return _cspyce0.spkezr(arg1, et, arg3, arg4, arg5)

def spkezr_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *") -> "int, int *, int *":
    r"""spkezr_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4)"""
    return _cspyce0.spkezr_vector(str1, in11, str2, str3, str4)

def spkgeo(targ: "SpiceInt", et: "SpiceDouble", CONST_STRING: "ConstSpiceChar *", obs: "SpiceInt") -> "SpiceDouble [6], SpiceDouble *":
    r"""spkgeo(SpiceInt targ, SpiceDouble et, ConstSpiceChar * CONST_STRING, SpiceInt obs)"""
    return _cspyce0.spkgeo(targ, et, CONST_STRING, obs)

def spkgeo_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *":
    r"""spkgeo_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, SpiceInt k2)"""
    return _cspyce0.spkgeo_vector(k1, in11, str1, k2)

def spkgps(targ: "SpiceInt", et: "SpiceDouble", CONST_STRING: "ConstSpiceChar *", obs: "SpiceInt") -> "SpiceDouble [3], SpiceDouble *":
    r"""spkgps(SpiceInt targ, SpiceDouble et, ConstSpiceChar * CONST_STRING, SpiceInt obs)"""
    return _cspyce0.spkgps(targ, et, CONST_STRING, obs)

def spkgps_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", k2: "SpiceInt") -> "int, int *, int *":
    r"""spkgps_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, SpiceInt k2)"""
    return _cspyce0.spkgps_vector(k1, in11, str1, k2)

def spkltc(targ: "SpiceInt", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", stobs: "ConstSpiceDouble [6]") -> "ConstSpiceDouble [6], SpiceDouble [6], SpiceDouble *, SpiceDouble *":
    r"""spkltc(SpiceInt targ, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceDouble [6] stobs)"""
    return _cspyce0.spkltc(targ, et, arg3, arg4, stobs)

def spkltc_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *":
    r"""spkltc_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in21)"""
    return _cspyce0.spkltc_vector(k1, in11, str1, str2, in21)

def spkobj(spk: "ConstSpiceChar *") -> "int *":
    r"""spkobj(ConstSpiceChar * spk)"""
    return _cspyce0.spkobj(spk)

def spkpos(arg1: "ConstSpiceChar *", et: "SpiceDouble", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *") -> "SpiceDouble [3], SpiceDouble *":
    r"""spkpos(ConstSpiceChar * arg1, SpiceDouble et, ConstSpiceChar * arg3, ConstSpiceChar * arg4, ConstSpiceChar * arg5)"""
    return _cspyce0.spkpos(arg1, et, arg3, arg4, arg5)

def spkpos_vector(str1: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *") -> "int, int *, int *":
    r"""spkpos_vector(ConstSpiceChar * str1, ConstSpiceDouble * in11, ConstSpiceChar * str2, ConstSpiceChar * str3, ConstSpiceChar * str4)"""
    return _cspyce0.spkpos_vector(str1, in11, str2, str3, str4)

def spkssb(targ: "SpiceInt", et: "SpiceDouble", CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble [6]":
    r"""spkssb(SpiceInt targ, SpiceDouble et, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.spkssb(targ, et, CONST_STRING)

def spkssb_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *") -> "int, int *":
    r"""spkssb_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceChar * str1)"""
    return _cspyce0.spkssb_vector(k1, in11, str1)

def srfc2s(code: "SpiceInt", bodyid: "SpiceInt") -> "SpiceChar [256], SpiceBoolean *":
    r"""srfc2s(SpiceInt code, SpiceInt bodyid)"""
    return _cspyce0.srfc2s(code, bodyid)

def srfcss(code: "SpiceInt", CONST_STRING: "ConstSpiceChar *") -> "SpiceChar [256], SpiceBoolean *":
    r"""srfcss(SpiceInt code, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.srfcss(code, CONST_STRING)

def srfnrm(method: "ConstSpiceChar *", target: "ConstSpiceChar *", et: "SpiceDouble", fixref: "ConstSpiceChar *", npts: "SpiceInt") -> "SpiceDouble [][3], int *":
    r"""srfnrm(ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, SpiceInt npts)"""
    return _cspyce0.srfnrm(method, target, et, fixref, npts)

def srfrec(body: "SpiceInt", longitude: "SpiceDouble", latitude: "SpiceDouble") -> "SpiceDouble [3]":
    r"""srfrec(SpiceInt body, SpiceDouble longitude, SpiceDouble latitude)"""
    return _cspyce0.srfrec(body, longitude, latitude)

def srfrec_vector(k1: "SpiceInt", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *") -> "int, int, int *":
    r"""srfrec_vector(SpiceInt k1, ConstSpiceDouble * in11, ConstSpiceDouble * in12)"""
    return _cspyce0.srfrec_vector(k1, in11, in12)

def srfs2c(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *") -> "SpiceInt *, SpiceBoolean *":
    r"""srfs2c(ConstSpiceChar * arg1, ConstSpiceChar * arg2)"""
    return _cspyce0.srfs2c(arg1, arg2)

def srfscc(CONST_STRING: "ConstSpiceChar *", body_id: "SpiceInt") -> "SpiceInt *, SpiceBoolean *":
    r"""srfscc(ConstSpiceChar * CONST_STRING, SpiceInt body_id)"""
    return _cspyce0.srfscc(CONST_STRING, body_id)

def srfxpt(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *", dvec: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble [3], SpiceBoolean *":
    r"""srfxpt(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6, ConstSpiceDouble [3] dvec)"""
    return _cspyce0.srfxpt(arg1, arg2, et, arg4, arg5, arg6, dvec)

def srfxpt_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *", in21: "ConstSpiceDouble *") -> "int, int, int *, int *, int *, int *, int *":
    r"""srfxpt_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5, ConstSpiceDouble * in21)"""
    return _cspyce0.srfxpt_vector(str1, str2, in11, str3, str4, str5, in21)

def stcf01(catnam: "ConstSpiceChar *", westra: "SpiceDouble", eastra: "SpiceDouble", sthdec: "SpiceDouble", nthdec: "SpiceDouble") -> "SpiceInt *":
    r"""stcf01(ConstSpiceChar * catnam, SpiceDouble westra, SpiceDouble eastra, SpiceDouble sthdec, SpiceDouble nthdec)"""
    return _cspyce0.stcf01(catnam, westra, eastra, sthdec, nthdec)

def stcg01(index: "SpiceInt") -> "SpiceDouble *, SpiceDouble *, SpiceDouble *, SpiceDouble *, SpiceInt *, SpiceChar [20], SpiceDouble *":
    r"""stcg01(SpiceInt index)"""
    return _cspyce0.stcg01(index)

def stcl01(catfnm: "ConstSpiceChar *") -> "SpiceChar [256], SpiceInt *":
    r"""stcl01(ConstSpiceChar * catfnm)"""
    return _cspyce0.stcl01(catfnm)

def stelab(pobj: "ConstSpiceDouble [3]", vobs: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""stelab(ConstSpiceDouble [3] pobj, ConstSpiceDouble [3] vobs)"""
    return _cspyce0.stelab(pobj, vobs)

def stelab_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""stelab_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.stelab_vector(in21, in22)

def stlabx(pobj: "ConstSpiceDouble [3]", vobs: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""stlabx(ConstSpiceDouble [3] pobj, ConstSpiceDouble [3] vobs)"""
    return _cspyce0.stlabx(pobj, vobs)

def stlabx_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""stlabx_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.stlabx_vector(in21, in22)

def stpool(item: "ConstSpiceChar *", nth: "SpiceInt", contin: "ConstSpiceChar *") -> "SpiceChar [1024], SpiceBoolean *":
    r"""stpool(ConstSpiceChar * item, SpiceInt nth, ConstSpiceChar * contin)"""
    return _cspyce0.stpool(item, nth, contin)

def str2et(CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""str2et(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.str2et(CONST_STRING)

def subpnt(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *") -> "SpiceDouble [3], SpiceDouble *, SpiceDouble [3]":
    r"""subpnt(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6)"""
    return _cspyce0.subpnt(arg1, arg2, et, arg4, arg5, arg6)

def subpnt_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *") -> "int, int *, int *, int *":
    r"""subpnt_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5)"""
    return _cspyce0.subpnt_vector(str1, str2, in11, str3, str4, str5)

def subpt(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *") -> "SpiceDouble [3], SpiceDouble *":
    r"""subpt(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5)"""
    return _cspyce0.subpt(arg1, arg2, et, arg4, arg5)

def subpt_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *") -> "int, int *, int *":
    r"""subpt_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4)"""
    return _cspyce0.subpt_vector(str1, str2, in11, str3, str4)

def subslr(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *", arg6: "ConstSpiceChar *") -> "SpiceDouble [3], SpiceDouble *, SpiceDouble [3]":
    r"""subslr(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5, ConstSpiceChar * arg6)"""
    return _cspyce0.subslr(arg1, arg2, et, arg4, arg5, arg6)

def subslr_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *", str5: "ConstSpiceChar *") -> "int, int *, int *, int *":
    r"""subslr_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4, ConstSpiceChar * str5)"""
    return _cspyce0.subslr_vector(str1, str2, in11, str3, str4, str5)

def subsol(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble", arg4: "ConstSpiceChar *", arg5: "ConstSpiceChar *") -> "SpiceDouble [3]":
    r"""subsol(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et, ConstSpiceChar * arg4, ConstSpiceChar * arg5)"""
    return _cspyce0.subsol(arg1, arg2, et, arg4, arg5)

def subsol_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *", str3: "ConstSpiceChar *", str4: "ConstSpiceChar *") -> "int, int *":
    r"""subsol_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11, ConstSpiceChar * str3, ConstSpiceChar * str4)"""
    return _cspyce0.subsol_vector(str1, str2, in11, str3, str4)

def surfnm(a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble", point: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""surfnm(SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble [3] point)"""
    return _cspyce0.surfnm(a, b, c, point)

def surfpt(positn: "ConstSpiceDouble [3]", u: "ConstSpiceDouble [3]", a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3], SpiceBoolean *":
    r"""surfpt(ConstSpiceDouble [3] positn, ConstSpiceDouble [3] u, SpiceDouble a, SpiceDouble b, SpiceDouble c)"""
    return _cspyce0.surfpt(positn, u, a, b, c)

def surfpt_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int, int, int *, int *":
    r"""surfpt_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.surfpt_vector(in21, in22, in11, in12, in13)

def surfpv(stvrtx: "ConstSpiceDouble [6]", stdir: "ConstSpiceDouble [6]", a: "SpiceDouble", b: "SpiceDouble", c: "SpiceDouble") -> "ConstSpiceDouble [6], ConstSpiceDouble [6], SpiceDouble [6], SpiceBoolean *":
    r"""surfpv(ConstSpiceDouble [6] stvrtx, ConstSpiceDouble [6] stdir, SpiceDouble a, SpiceDouble b, SpiceDouble c)"""
    return _cspyce0.surfpv(stvrtx, stdir, a, b, c)

def surfpv_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int, int, int *, int *":
    r"""surfpv_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.surfpv_vector(in21, in22, in11, in12, in13)

def sxform(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", et: "SpiceDouble") -> "SpiceDouble [6][6]":
    r"""sxform(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceDouble et)"""
    return _cspyce0.sxform(arg1, arg2, et)

def sxform_vector(str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""sxform_vector(ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceDouble * in11)"""
    return _cspyce0.sxform_vector(str1, str2, in11)

def termpt(method: "ConstSpiceChar *", ilusrc: "ConstSpiceChar *", target: "ConstSpiceChar *", et: "SpiceDouble", fixref: "ConstSpiceChar *", abcorr: "ConstSpiceChar *", corloc: "ConstSpiceChar *", obsrvr: "ConstSpiceChar *", refvec: "ConstSpiceDouble [3]", rolstp: "SpiceDouble", ncuts: "SpiceInt", schstp: "SpiceDouble", soltol: "SpiceDouble", maxn: "SpiceInt") -> "ConstSpiceDouble [3], SpiceInt *, int *, int *, int *":
    r"""termpt(ConstSpiceChar * method, ConstSpiceChar * ilusrc, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * corloc, ConstSpiceChar * obsrvr, ConstSpiceDouble [3] refvec, SpiceDouble rolstp, SpiceInt ncuts, SpiceDouble schstp, SpiceDouble soltol, SpiceInt maxn)"""
    return _cspyce0.termpt(method, ilusrc, target, et, fixref, abcorr, corloc, obsrvr, refvec, rolstp, ncuts, schstp, soltol, maxn)

def timdef(arg1: "ConstSpiceChar *", arg2: "ConstSpiceChar *", lenout: "SpiceInt") -> "SpiceChar [256]":
    r"""timdef(ConstSpiceChar * arg1, ConstSpiceChar * arg2, SpiceInt lenout)"""
    return _cspyce0.timdef(arg1, arg2, lenout)

def timout(et: "SpiceDouble", CONST_STRING: "ConstSpiceChar *") -> "SpiceChar [256]":
    r"""timout(SpiceDouble et, ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.timout(et, CONST_STRING)

def tipbod(CONST_STRING: "ConstSpiceChar *", body: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble [3][3]":
    r"""tipbod(ConstSpiceChar * CONST_STRING, SpiceInt body, SpiceDouble et)"""
    return _cspyce0.tipbod(CONST_STRING, body, et)

def tipbod_vector(str1: "ConstSpiceChar *", k1: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""tipbod_vector(ConstSpiceChar * str1, SpiceInt k1, ConstSpiceDouble * in11)"""
    return _cspyce0.tipbod_vector(str1, k1, in11)

def tisbod(CONST_STRING: "ConstSpiceChar *", body: "SpiceInt", et: "SpiceDouble") -> "SpiceDouble [6][6]":
    r"""tisbod(ConstSpiceChar * CONST_STRING, SpiceInt body, SpiceDouble et)"""
    return _cspyce0.tisbod(CONST_STRING, body, et)

def tisbod_vector(str1: "ConstSpiceChar *", k1: "SpiceInt", in11: "ConstSpiceDouble *") -> "int, int *":
    r"""tisbod_vector(ConstSpiceChar * str1, SpiceInt k1, ConstSpiceDouble * in11)"""
    return _cspyce0.tisbod_vector(str1, k1, in11)

def tkvrsn(CONST_STRING: "ConstSpiceChar *") -> "char *":
    r"""tkvrsn(ConstSpiceChar * CONST_STRING) -> char *"""
    return _cspyce0.tkvrsn(CONST_STRING)

def tparse(string: "ConstSpiceChar *") -> "SpiceDouble *, SpiceChar [1024]":
    r"""tparse(ConstSpiceChar * string)"""
    return _cspyce0.tparse(string)

def tpictr(sample: "ConstSpiceChar *") -> "SpiceChar [256], SpiceBoolean *, SpiceChar [1024]":
    r"""tpictr(ConstSpiceChar * sample)"""
    return _cspyce0.tpictr(sample)

def trace(matrix: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3]":
    r"""trace(ConstSpiceDouble [3][3] matrix) -> SpiceDouble"""
    return _cspyce0.trace(matrix)

def trace_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""trace_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.trace_vector(in31)

def trcoff() -> "void":
    r"""trcoff()"""
    return _cspyce0.trcoff()

def trcdep() -> "SpiceInt *":
    r"""trcdep()"""
    return _cspyce0.trcdep()

def trcnam(index: "SpiceInt") -> "SpiceChar [100]":
    r"""trcnam(SpiceInt index)"""
    return _cspyce0.trcnam(index)

def tsetyr(year: "SpiceInt") -> "void":
    r"""tsetyr(SpiceInt year)"""
    return _cspyce0.tsetyr(year)

def twopi() -> "SpiceDouble":
    r"""twopi() -> SpiceDouble"""
    return _cspyce0.twopi()

def twovec(axdef: "ConstSpiceDouble [3]", indexa: "SpiceInt", plndef: "ConstSpiceDouble [3]", indexp: "SpiceInt") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3][3]":
    r"""twovec(ConstSpiceDouble [3] axdef, SpiceInt indexa, ConstSpiceDouble [3] plndef, SpiceInt indexp)"""
    return _cspyce0.twovec(axdef, indexa, plndef, indexp)

def twovec_vector(in21: "ConstSpiceDouble *", k1: "SpiceInt", in22: "ConstSpiceDouble *", k2: "SpiceInt") -> "int, int, int *":
    r"""twovec_vector(ConstSpiceDouble * in21, SpiceInt k1, ConstSpiceDouble * in22, SpiceInt k2)"""
    return _cspyce0.twovec_vector(in21, k1, in22, k2)

def tyear() -> "SpiceDouble":
    r"""tyear() -> SpiceDouble"""
    return _cspyce0.tyear()

def ucrss(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""ucrss(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2)"""
    return _cspyce0.ucrss(v1, v2)

def ucrss_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""ucrss_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.ucrss_vector(in21, in22)

def unitim(epoch: "SpiceDouble", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *") -> "SpiceDouble":
    r"""unitim(SpiceDouble epoch, ConstSpiceChar * arg2, ConstSpiceChar * arg3) -> SpiceDouble"""
    return _cspyce0.unitim(epoch, arg2, arg3)

def unitim_vector(in11: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *") -> "int, int *":
    r"""unitim_vector(ConstSpiceDouble * in11, ConstSpiceChar * str1, ConstSpiceChar * str2)"""
    return _cspyce0.unitim_vector(in11, str1, str2)

def unload(CONST_STRING: "ConstSpiceChar *") -> "void":
    r"""unload(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.unload(CONST_STRING)

def unorm(v1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3], SpiceDouble *":
    r"""unorm(ConstSpiceDouble [3] v1)"""
    return _cspyce0.unorm(v1)

def unorm_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *":
    r"""unorm_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.unorm_vector(in21)

def unormg(v1: "ConstSpiceDouble *") -> "SpiceInt, int *, SpiceDouble *":
    r"""unormg(ConstSpiceDouble * v1)"""
    return _cspyce0.unormg(v1)

def my_unormg_nomalloc(v1: "ConstSpiceDouble *", v2: "SpiceDouble *", nd2: "int *") -> "SpiceInt, SpiceDouble *":
    r"""my_unormg_nomalloc(ConstSpiceDouble * v1, SpiceDouble * v2, int * nd2)"""
    return _cspyce0.my_unormg_nomalloc(v1, v2, nd2)

def unormg_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *":
    r"""unormg_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.unormg_vector(in21)

def utc2et(CONST_STRING: "ConstSpiceChar *") -> "SpiceDouble *":
    r"""utc2et(ConstSpiceChar * CONST_STRING)"""
    return _cspyce0.utc2et(CONST_STRING)

def vadd(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vadd(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2)"""
    return _cspyce0.vadd(v1, v2)

def vadd_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vadd_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vadd_vector(in21, in22)

def vaddg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int, int *":
    r"""vaddg(ConstSpiceDouble * v1, ConstSpiceDouble * v2)"""
    return _cspyce0.vaddg(v1, v2)

def my_vaddg_nomalloc(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *", v3: "SpiceDouble *", nd3: "int *") -> "SpiceInt, int":
    r"""my_vaddg_nomalloc(ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceDouble * v3, int * nd3)"""
    return _cspyce0.my_vaddg_nomalloc(v1, v2, v3, nd3)

def vaddg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vaddg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vaddg_vector(in21, in22)

def vcrss(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vcrss(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2)"""
    return _cspyce0.vcrss(v1, v2)

def vcrss_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vcrss_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vcrss_vector(in21, in22)

def vdist(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3]":
    r"""vdist(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2) -> SpiceDouble"""
    return _cspyce0.vdist(v1, v2)

def vdist_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vdist_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vdist_vector(in21, in22)

def vdistg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int":
    r"""vdistg(ConstSpiceDouble * v1, ConstSpiceDouble * v2) -> SpiceDouble"""
    return _cspyce0.vdistg(v1, v2)

def vdistg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vdistg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vdistg_vector(in21, in22)

def vdot(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3]":
    r"""vdot(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2) -> SpiceDouble"""
    return _cspyce0.vdot(v1, v2)

def vdot_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vdot_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vdot_vector(in21, in22)

def vdotg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int":
    r"""vdotg(ConstSpiceDouble * v1, ConstSpiceDouble * v2) -> SpiceDouble"""
    return _cspyce0.vdotg(v1, v2)

def vdotg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vdotg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vdotg_vector(in21, in22)

def vequ(vin: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vequ(ConstSpiceDouble [3] vin)"""
    return _cspyce0.vequ(vin)

def vequ_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vequ_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vequ_vector(in21)

def vequg(v1: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""vequg(ConstSpiceDouble * v1)"""
    return _cspyce0.vequg(v1)

def my_vequg_nomalloc(v1: "ConstSpiceDouble *", v2: "SpiceDouble *", nd2: "int *") -> "SpiceInt":
    r"""my_vequg_nomalloc(ConstSpiceDouble * v1, SpiceDouble * v2, int * nd2)"""
    return _cspyce0.my_vequg_nomalloc(v1, v2, nd2)

def vequg_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vequg_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vequg_vector(in21)

def vhat(v1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vhat(ConstSpiceDouble [3] v1)"""
    return _cspyce0.vhat(v1)

def vhat_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vhat_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vhat_vector(in21)

def vhatg(v1: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""vhatg(ConstSpiceDouble * v1)"""
    return _cspyce0.vhatg(v1)

def my_vhatg_nomalloc(v1: "ConstSpiceDouble *", v2: "SpiceDouble *", nd2: "int *") -> "SpiceInt":
    r"""my_vhatg_nomalloc(ConstSpiceDouble * v1, SpiceDouble * v2, int * nd2)"""
    return _cspyce0.my_vhatg_nomalloc(v1, v2, nd2)

def vhatg_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vhatg_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vhatg_vector(in21)

def vlcom3(a: "SpiceDouble", v1: "ConstSpiceDouble [3]", b: "SpiceDouble", v2: "ConstSpiceDouble [3]", c: "SpiceDouble", v3: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vlcom3(SpiceDouble a, ConstSpiceDouble [3] v1, SpiceDouble b, ConstSpiceDouble [3] v2, SpiceDouble c, ConstSpiceDouble [3] v3)"""
    return _cspyce0.vlcom3(a, v1, b, v2, c, v3)

def vlcom3_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in13: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int, int, int, int *":
    r"""vlcom3_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21, ConstSpiceDouble * in12, ConstSpiceDouble * in22, ConstSpiceDouble * in13, ConstSpiceDouble * in23)"""
    return _cspyce0.vlcom3_vector(in11, in21, in12, in22, in13, in23)

def vlcom(a: "SpiceDouble", v1: "ConstSpiceDouble [3]", b: "SpiceDouble", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vlcom(SpiceDouble a, ConstSpiceDouble [3] v1, SpiceDouble b, ConstSpiceDouble [3] v2)"""
    return _cspyce0.vlcom(a, v1, b, v2)

def vlcom_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int, int, int *":
    r"""vlcom_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21, ConstSpiceDouble * in12, ConstSpiceDouble * in22)"""
    return _cspyce0.vlcom_vector(in11, in21, in12, in22)

def vlcomg(a: "SpiceDouble", v1: "ConstSpiceDouble *", b: "SpiceDouble", v2: "ConstSpiceDouble *") -> "SpiceInt, int, int *":
    r"""vlcomg(SpiceDouble a, ConstSpiceDouble * v1, SpiceDouble b, ConstSpiceDouble * v2)"""
    return _cspyce0.vlcomg(a, v1, b, v2)

def my_vlcomg_nomalloc(a: "SpiceDouble", v1: "ConstSpiceDouble *", b: "SpiceDouble", v2: "ConstSpiceDouble *", v3: "SpiceDouble *", nd3: "int *") -> "SpiceInt, int":
    r"""my_vlcomg_nomalloc(SpiceDouble a, ConstSpiceDouble * v1, SpiceDouble b, ConstSpiceDouble * v2, SpiceDouble * v3, int * nd3)"""
    return _cspyce0.my_vlcomg_nomalloc(a, v1, b, v2, v3, nd3)

def vlcomg_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int, int, int *":
    r"""vlcomg_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21, ConstSpiceDouble * in12, ConstSpiceDouble * in22)"""
    return _cspyce0.vlcomg_vector(in11, in21, in12, in22)

def vminug(v1: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""vminug(ConstSpiceDouble * v1)"""
    return _cspyce0.vminug(v1)

def my_vminug_nomalloc(v1: "ConstSpiceDouble *", v2: "SpiceDouble *", nd2: "int *") -> "SpiceInt":
    r"""my_vminug_nomalloc(ConstSpiceDouble * v1, SpiceDouble * v2, int * nd2)"""
    return _cspyce0.my_vminug_nomalloc(v1, v2, nd2)

def vminug_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vminug_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vminug_vector(in21)

def vminus(v1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vminus(ConstSpiceDouble [3] v1)"""
    return _cspyce0.vminus(v1)

def vminus_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vminus_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vminus_vector(in21)

def vnorm(v1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3]":
    r"""vnorm(ConstSpiceDouble [3] v1) -> SpiceDouble"""
    return _cspyce0.vnorm(v1)

def vnorm_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vnorm_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vnorm_vector(in21)

def vnormg(v1: "ConstSpiceDouble *") -> "SpiceInt":
    r"""vnormg(ConstSpiceDouble * v1) -> SpiceDouble"""
    return _cspyce0.vnormg(v1)

def vnormg_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vnormg_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vnormg_vector(in21)

def vpack(x: "SpiceDouble", y: "SpiceDouble", z: "SpiceDouble") -> "SpiceDouble [3]":
    r"""vpack(SpiceDouble x, SpiceDouble y, SpiceDouble z)"""
    return _cspyce0.vpack(x, y, z)

def vpack_vector(in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""vpack_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.vpack_vector(in11, in12, in13)

def vperp(a: "ConstSpiceDouble [3]", b: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vperp(ConstSpiceDouble [3] a, ConstSpiceDouble [3] b)"""
    return _cspyce0.vperp(a, b)

def vperp_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vperp_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vperp_vector(in21, in22)

def vprjp(vin: "ConstSpiceDouble [3]", plane: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [3], ConstSpiceDouble [NPLANE], SpiceDouble [3]":
    r"""vprjp(ConstSpiceDouble [3] vin, ConstSpiceDouble [NPLANE] plane)"""
    return _cspyce0.vprjp(vin, plane)

def vprjp_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vprjp_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vprjp_vector(in21, in22)

def vprjpi(vin: "ConstSpiceDouble [3]", projpl: "ConstSpiceDouble [NPLANE]", invpl: "ConstSpiceDouble [NPLANE]") -> "ConstSpiceDouble [3], ConstSpiceDouble [NPLANE], ConstSpiceDouble [NPLANE], SpiceDouble [3], SpiceBoolean *":
    r"""vprjpi(ConstSpiceDouble [3] vin, ConstSpiceDouble [NPLANE] projpl, ConstSpiceDouble [NPLANE] invpl)"""
    return _cspyce0.vprjpi(vin, projpl, invpl)

def vprjpi_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in23: "ConstSpiceDouble *") -> "int, int, int, int *, int *":
    r"""vprjpi_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in23)"""
    return _cspyce0.vprjpi_vector(in21, in22, in23)

def vproj(a: "ConstSpiceDouble [3]", b: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vproj(ConstSpiceDouble [3] a, ConstSpiceDouble [3] b)"""
    return _cspyce0.vproj(a, b)

def vproj_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vproj_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vproj_vector(in21, in22)

def vrel(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3]":
    r"""vrel(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2) -> SpiceDouble"""
    return _cspyce0.vrel(v1, v2)

def vrel_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vrel_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vrel_vector(in21, in22)

def vrelg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int":
    r"""vrelg(ConstSpiceDouble * v1, ConstSpiceDouble * v2) -> SpiceDouble"""
    return _cspyce0.vrelg(v1, v2)

def vrelg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vrelg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vrelg_vector(in21, in22)

def vrotv(v: "ConstSpiceDouble [3]", axis: "ConstSpiceDouble [3]", theta: "SpiceDouble") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vrotv(ConstSpiceDouble [3] v, ConstSpiceDouble [3] axis, SpiceDouble theta)"""
    return _cspyce0.vrotv(v, axis, theta)

def vrotv_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *", in11: "ConstSpiceDouble *") -> "int, int, int, int *":
    r"""vrotv_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22, ConstSpiceDouble * in11)"""
    return _cspyce0.vrotv_vector(in21, in22, in11)

def vscl(s: "SpiceDouble", v1: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vscl(SpiceDouble s, ConstSpiceDouble [3] v1)"""
    return _cspyce0.vscl(s, v1)

def vscl_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vscl_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21)"""
    return _cspyce0.vscl_vector(in11, in21)

def vsclg(s: "SpiceDouble", v1: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""vsclg(SpiceDouble s, ConstSpiceDouble * v1)"""
    return _cspyce0.vsclg(s, v1)

def my_vsclg_nomalloc(s: "SpiceDouble", v1: "ConstSpiceDouble *", v2: "SpiceDouble *", nd2: "int *") -> "SpiceInt":
    r"""my_vsclg_nomalloc(SpiceDouble s, ConstSpiceDouble * v1, SpiceDouble * v2, int * nd2)"""
    return _cspyce0.my_vsclg_nomalloc(s, v1, v2, nd2)

def vsclg_vector(in11: "ConstSpiceDouble *", in21: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vsclg_vector(ConstSpiceDouble * in11, ConstSpiceDouble * in21)"""
    return _cspyce0.vsclg_vector(in11, in21)

def vsep(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3]":
    r"""vsep(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2) -> SpiceDouble"""
    return _cspyce0.vsep(v1, v2)

def vsep_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vsep_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vsep_vector(in21, in22)

def vsepg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int":
    r"""vsepg(ConstSpiceDouble * v1, ConstSpiceDouble * v2) -> SpiceDouble"""
    return _cspyce0.vsepg(v1, v2)

def vsepg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vsepg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vsepg_vector(in21, in22)

def vsub(v1: "ConstSpiceDouble [3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3], SpiceDouble [3]":
    r"""vsub(ConstSpiceDouble [3] v1, ConstSpiceDouble [3] v2)"""
    return _cspyce0.vsub(v1, v2)

def vsub_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vsub_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vsub_vector(in21, in22)

def vsubg(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "SpiceInt, int, int *":
    r"""vsubg(ConstSpiceDouble * v1, ConstSpiceDouble * v2)"""
    return _cspyce0.vsubg(v1, v2)

def my_vsubg_nomalloc(v1: "ConstSpiceDouble *", v2: "ConstSpiceDouble *", v3: "SpiceDouble *", nd3: "int *") -> "SpiceInt, int":
    r"""my_vsubg_nomalloc(ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceDouble * v3, int * nd3)"""
    return _cspyce0.my_vsubg_nomalloc(v1, v2, v3, nd3)

def vsubg_vector(in21: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vsubg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in22)"""
    return _cspyce0.vsubg_vector(in21, in22)

def vtmv(v1: "ConstSpiceDouble [3]", matrix: "ConstSpiceDouble [3][3]", v2: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], ConstSpiceDouble [3][3], ConstSpiceDouble [3]":
    r"""vtmv(ConstSpiceDouble [3] v1, ConstSpiceDouble [3][3] matrix, ConstSpiceDouble [3] v2) -> SpiceDouble"""
    return _cspyce0.vtmv(v1, matrix, v2)

def vtmv_vector(in21: "ConstSpiceDouble *", in31: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vtmv_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in31, ConstSpiceDouble * in22)"""
    return _cspyce0.vtmv_vector(in21, in31, in22)

def vtmvg(v1: "ConstSpiceDouble *", matrix: "ConstSpiceDouble *", v2: "ConstSpiceDouble *") -> "int, SpiceInt, int":
    r"""vtmvg(ConstSpiceDouble * v1, ConstSpiceDouble * matrix, ConstSpiceDouble * v2) -> SpiceDouble"""
    return _cspyce0.vtmvg(v1, matrix, v2)

def vtmvg_vector(in21: "ConstSpiceDouble *", in31: "ConstSpiceDouble *", in22: "ConstSpiceDouble *") -> "int, int, int *":
    r"""vtmvg_vector(ConstSpiceDouble * in21, ConstSpiceDouble * in31, ConstSpiceDouble * in22)"""
    return _cspyce0.vtmvg_vector(in21, in31, in22)

def vupack(v: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3], SpiceDouble *, SpiceDouble *, SpiceDouble *":
    r"""vupack(ConstSpiceDouble [3] v)"""
    return _cspyce0.vupack(v)

def vupack_vector(in21: "ConstSpiceDouble *") -> "int, int *, int *, int *":
    r"""vupack_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vupack_vector(in21)

def vzero(v: "ConstSpiceDouble [3]") -> "ConstSpiceDouble [3]":
    r"""vzero(ConstSpiceDouble [3] v) -> SpiceBoolean"""
    return _cspyce0.vzero(v)

def vzero_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vzero_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vzero_vector(in21)

def vzerog(v: "ConstSpiceDouble *") -> "SpiceInt":
    r"""vzerog(ConstSpiceDouble * v) -> SpiceBoolean"""
    return _cspyce0.vzerog(v)

def vzerog_vector(in21: "ConstSpiceDouble *") -> "int, int *":
    r"""vzerog_vector(ConstSpiceDouble * in21)"""
    return _cspyce0.vzerog_vector(in21)

def xf2eul(xform: "ConstSpiceDouble [6][6]", axisa: "SpiceInt", axisb: "SpiceInt", axisc: "SpiceInt") -> "ConstSpiceDouble [6][6], SpiceDouble [6], SpiceBoolean *":
    r"""xf2eul(ConstSpiceDouble [6][6] xform, SpiceInt axisa, SpiceInt axisb, SpiceInt axisc)"""
    return _cspyce0.xf2eul(xform, axisa, axisb, axisc)

def xf2eul_vector(in31: "ConstSpiceDouble *", in11: "ConstSpiceDouble *", in12: "ConstSpiceDouble *", in13: "ConstSpiceDouble *") -> "int, int, int, int *, int *":
    r"""xf2eul_vector(ConstSpiceDouble * in31, ConstSpiceDouble * in11, ConstSpiceDouble * in12, ConstSpiceDouble * in13)"""
    return _cspyce0.xf2eul_vector(in31, in11, in12, in13)

def xf2rav(xform: "ConstSpiceDouble [6][6]") -> "ConstSpiceDouble [6][6], SpiceDouble [3][3], SpiceDouble [3]":
    r"""xf2rav(ConstSpiceDouble [6][6] xform)"""
    return _cspyce0.xf2rav(xform)

def xf2rav_vector(in31: "ConstSpiceDouble *") -> "int *, int *":
    r"""xf2rav_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.xf2rav_vector(in31)

def xfmsta(input_state: "ConstSpiceDouble [6]", arg2: "ConstSpiceChar *", arg3: "ConstSpiceChar *", arg4: "ConstSpiceChar *") -> "ConstSpiceDouble [6], SpiceDouble [6]":
    r"""xfmsta(ConstSpiceDouble [6] input_state, ConstSpiceChar * arg2, ConstSpiceChar * arg3, ConstSpiceChar * arg4)"""
    return _cspyce0.xfmsta(input_state, arg2, arg3, arg4)

def xfmsta_vector(in21: "ConstSpiceDouble *", str1: "ConstSpiceChar *", str2: "ConstSpiceChar *", str3: "ConstSpiceChar *") -> "int, int *":
    r"""xfmsta_vector(ConstSpiceDouble * in21, ConstSpiceChar * str1, ConstSpiceChar * str2, ConstSpiceChar * str3)"""
    return _cspyce0.xfmsta_vector(in21, str1, str2, str3)

def xpose6(m1: "ConstSpiceDouble [6][6]") -> "ConstSpiceDouble [6][6], SpiceDouble [6][6]":
    r"""xpose6(ConstSpiceDouble [6][6] m1)"""
    return _cspyce0.xpose6(m1)

def xpose6_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""xpose6_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.xpose6_vector(in31)

def xpose(m1: "ConstSpiceDouble [3][3]") -> "ConstSpiceDouble [3][3], SpiceDouble [3][3]":
    r"""xpose(ConstSpiceDouble [3][3] m1)"""
    return _cspyce0.xpose(m1)

def xpose_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""xpose_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.xpose_vector(in31)

def xposeg(matrix: "ConstSpiceDouble *") -> "SpiceInt, int *":
    r"""xposeg(ConstSpiceDouble * matrix)"""
    return _cspyce0.xposeg(matrix)

def my_xposeg_nomalloc(matrix: "ConstSpiceDouble *", xposem: "SpiceDouble *", nrow1: "int *", ncol1: "int *") -> "SpiceInt":
    r"""my_xposeg_nomalloc(ConstSpiceDouble * matrix, SpiceDouble * xposem, int * nrow1, int * ncol1)"""
    return _cspyce0.my_xposeg_nomalloc(matrix, xposem, nrow1, ncol1)

def xposeg_vector(in31: "ConstSpiceDouble *") -> "int *":
    r"""xposeg_vector(ConstSpiceDouble * in31)"""
    return _cspyce0.xposeg_vector(in31)


