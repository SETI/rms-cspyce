/****************************************************************************************
* cspyce0/vectorize.i
*
* This file is automatically generated by program make_vectorize.py. Do not modify.
* To regenerate:
*     python make_vectorize.py
* 
* See make_vectorize.py for more information.
*/

%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in11, int in11_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in12, int in12_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in13, int in13_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in14, int in14_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in15, int in15_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in16, int in16_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in17, int in17_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in18, int in18_dim1)};
%apply (ConstSpiceDouble *IN_ARRAY01, int DIM1) {(ConstSpiceDouble *in19, int in19_dim1)};

%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in21, int in21_dim1, int in21_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in22, int in22_dim1, int in22_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in23, int in23_dim1, int in23_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in24, int in24_dim1, int in24_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in25, int in25_dim1, int in25_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in26, int in26_dim1, int in26_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in27, int in27_dim1, int in27_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in28, int in28_dim1, int in28_dim2)};
%apply (ConstSpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(ConstSpiceDouble *in29, int in29_dim1, int in29_dim2)};

%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in33, int in33_dim1, int in33_dim2, int in33_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in34, int in34_dim1, int in34_dim2, int in34_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in35, int in35_dim1, int in35_dim2, int in35_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in36, int in36_dim1, int in36_dim2, int in36_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in37, int in37_dim1, int in37_dim2, int in37_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in38, int in38_dim1, int in38_dim2, int in38_dim3)};
%apply (ConstSpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(ConstSpiceDouble *in39, int in39_dim1, int in39_dim2, int in39_dim3)};

%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in11, int in11_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in12, int in12_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in13, int in13_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in14, int in14_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in15, int in15_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in16, int in16_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in17, int in17_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in18, int in18_dim1)};
%apply (SpiceDouble *IN_ARRAY01, int DIM1) {(SpiceDouble *in19, int in19_dim1)};

%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in21, int in21_dim1, int in21_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in22, int in22_dim1, int in22_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in23, int in23_dim1, int in23_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in24, int in24_dim1, int in24_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in25, int in25_dim1, int in25_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in26, int in26_dim1, int in26_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in27, int in27_dim1, int in27_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in28, int in28_dim1, int in28_dim2)};
%apply (SpiceDouble *IN_ARRAY12, int DIM1, int DIM2) {(SpiceDouble *in29, int in29_dim1, int in29_dim2)};

%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in33, int in33_dim1, int in33_dim2, int in33_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in34, int in34_dim1, int in34_dim2, int in34_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in35, int in35_dim1, int in35_dim2, int in35_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in36, int in36_dim1, int in36_dim2, int in36_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in37, int in37_dim1, int in37_dim2, int in37_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in38, int in38_dim1, int in38_dim2, int in38_dim3)};
%apply (SpiceDouble *IN_ARRAY23, int DIM1, int DIM2, int DIM3) {(SpiceDouble *in39, int in39_dim1, int in39_dim2, int in39_dim3)};

%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str1)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str2)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str3)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str4)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str5)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str6)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str7)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str8)};
%apply (ConstSpiceChar *CONST_STRING) {(ConstSpiceChar *str9)};

%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out11, int *out11_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out12, int *out12_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out13, int *out13_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out14, int *out14_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out15, int *out15_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out16, int *out16_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out17, int *out17_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out18, int *out18_dim1)};
%apply (SpiceDouble **OUT_ARRAY01, int *SIZE1) {(SpiceDouble **out19, int *out19_dim1)};

%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out21, int *out21_dim1, int *out21_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out22, int *out22_dim1, int *out22_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out23, int *out23_dim1, int *out23_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out24, int *out24_dim1, int *out24_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out25, int *out25_dim1, int *out25_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out26, int *out26_dim1, int *out26_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out27, int *out27_dim1, int *out27_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out28, int *out28_dim1, int *out28_dim2)};
%apply (SpiceDouble **OUT_ARRAY12, int *SIZE1, int *SIZE2) {(SpiceDouble **out29, int *out29_dim1, int *out29_dim2)};

%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out32, int *out32_dim1, int *out32_dim2, int *out32_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out33, int *out33_dim1, int *out33_dim2, int *out33_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out34, int *out34_dim1, int *out34_dim2, int *out34_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out35, int *out35_dim1, int *out35_dim2, int *out35_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out36, int *out36_dim1, int *out36_dim2, int *out36_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out37, int *out37_dim1, int *out37_dim2, int *out37_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out38, int *out38_dim1, int *out38_dim2, int *out38_dim3)};
%apply (SpiceDouble **OUT_ARRAY23, int *SIZE1, int *SIZE2, int *SIZE3) {(SpiceDouble **out39, int *out39_dim1, int *out39_dim2, int *out39_dim3)};

%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int1, int *int1_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int2, int *int2_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int3, int *int3_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int4, int *int4_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int5, int *int5_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int6, int *int6_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int7, int *int7_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int8, int *int8_dim1)};
%apply (SpiceInt **OUT_ARRAY01, int *SIZE1) {(SpiceInt **int9, int *int9_dim1)};

%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool1, int *bool1_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool2, int *bool2_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool3, int *bool3_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool4, int *bool4_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool5, int *bool5_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool6, int *bool6_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool7, int *bool7_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool8, int *bool8_dim1)};
%apply (SpiceBoolean **OUT_ARRAY01, int *SIZE1) {(SpiceBoolean **bool9, int *bool9_dim1)};


%define VECTORIZE_dX_d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in23 + (i % in23_dim1) * in23_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_2d_s__dMN_d_b(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceChar *str1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3,
        SpiceDouble **out11, int *out11_dim1,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;
        *out11 = NULL; *out11_dim1 = 0;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        SpiceDouble *out11_buffer = out31_buffer ? my_malloc(size, my_name) : NULL;
        SpiceBoolean *bool1_buffer = out11_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out31_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                str1,
                out31_buffer + i * M * N,
                out11_buffer + i,
                bool1_buffer + i);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_2d_s__dLM_dN_d_b(NAME, FUNC, L, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceChar *str1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = L; *out31_dim3 = M;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out31_buffer = my_malloc(size * L * M, my_name);
        SpiceDouble *out21_buffer = out31_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceBoolean *bool1_buffer = out11_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out31_buffer);
            free(out21_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                str1,
                out31_buffer + i * L * M,
                out21_buffer + i * N,
                out11_buffer + i,
                bool1_buffer + i);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_2s__d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i],
                str1,
                str2,
                out11_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_s__d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i],
                str1,
                out11_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in31 + (i) * in31_dim2 * in31_dim3);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_5d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in14, int in14_dim1,
        ConstSpiceDouble *in15, int in15_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in14_dim1) maxdim = in14_dim1;
        if (maxdim < in15_dim1) maxdim = in15_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in14_dim1 = (in14_dim1 == 0 ? 1 : in14_dim1);
        in15_dim1 = (in15_dim1 == 0 ? 1 : in15_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in14[i % in14_dim1],
                in15[i % in15_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__dKL_dMN(NAME, FUNC, K, L, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3,
        SpiceDouble **out32, int *out32_dim1, int *out32_dim2, int *out32_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = K; *out31_dim3 = L;
        *out32 = NULL; *out32_dim1 = 0; *out32_dim2 = M; *out32_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * K * L, my_name);
        SpiceDouble *out32_buffer = out31_buffer ? my_malloc(size * M * N, my_name) : NULL;
        if (!out32_buffer) {
            free(out31_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                out31_buffer + i * K * L,
                out32_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
        *out32 = out32_buffer; *out32_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_5d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in14, int in14_dim1,
        ConstSpiceDouble *in15, int in15_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in14_dim1) maxdim = in14_dim1;
        if (maxdim < in15_dim1) maxdim = in15_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in14_dim1 = (in14_dim1 == 0 ? 1 : in14_dim1);
        in15_dim1 = (in15_dim1 == 0 ? 1 : in15_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in14[i % in14_dim1],
                in15[i % in15_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i) * in21_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__dL_dM_dN(NAME, FUNC, L, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2,
        SpiceDouble **out23, int *out23_dim1, int *out23_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = L;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = M;
        *out23 = NULL; *out23_dim1 = 0; *out23_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * L, my_name);
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * M, my_name) : NULL;
        SpiceDouble *out23_buffer = out22_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out23_buffer) {
            free(out21_buffer);
            free(out22_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out21_buffer + i * L,
                out22_buffer + i * M,
                out23_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
        *out23 = out23_buffer; *out23_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2d_dX_2d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in14, int in14_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in14_dim1) maxdim = in14_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in14_dim1 = (in14_dim1 == 0 ? 1 : in14_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                in13[i % in13_dim1],
                in14[i % in14_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d_3i__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceInt k1,
        SpiceInt k2,
        SpiceInt k3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                k1,
                k2,
                k3,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_3i__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceInt k1,
        SpiceInt k2,
        SpiceInt k3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                k1,
                k2,
                k3,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_dX_3s_d__b(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceBoolean *bool1_buffer = my_bool_malloc(size, my_name);
        if (!bool1_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in21 + (i % in21_dim1) * in21_dim2,
                str2,
                str3,
                str4,
                in11[i % in11_dim1],
                bool1_buffer + i);
        }

        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_6s_d__b(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceChar *str6,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceBoolean *bool1_buffer = my_bool_malloc(size, my_name);
        if (!bool1_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                str3,
                str4,
                str5,
                str6,
                in11[i],
                bool1_buffer + i);
        }

        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_eX__dL_dM_dN(NAME, FUNC, L, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2,
        SpiceDouble **out23, int *out23_dim1, int *out23_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = L;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = M;
        *out23 = NULL; *out23_dim1 = 0; *out23_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * L, my_name);
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * M, my_name) : NULL;
        SpiceDouble *out23_buffer = out22_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out23_buffer) {
            free(out21_buffer);
            free(out22_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out21_buffer + i * L,
                out22_buffer + i * M,
                out23_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
        *out23 = out23_buffer; *out23_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2i_d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        SpiceInt k2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                k2,
                in11[i],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_5d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in14, int in14_dim1,
        ConstSpiceDouble *in15, int in15_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in14_dim1) maxdim = in14_dim1;
        if (maxdim < in15_dim1) maxdim = in15_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in14_dim1 = (in14_dim1 == 0 ? 1 : in14_dim1);
        in15_dim1 = (in15_dim1 == 0 ? 1 : in15_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in14[i % in14_dim1],
                in15[i % in15_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_d_2s_dX__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in11[i % in11_dim1],
                str2,
                str3,
                in21 + (i % in21_dim1) * in21_dim2,
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3s_d_3s_dX__d_dN_3d_2b(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceChar *str6,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1,
        SpiceDouble **out14, int *out14_dim1,
        SpiceBoolean **bool1, int *bool1_dim1,
        SpiceBoolean **bool2, int *bool2_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;
        *out14 = NULL; *out14_dim1 = 0;
        *bool1 = NULL; *bool1_dim1 = 0;
        *bool2 = NULL; *bool2_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out21_buffer = out11_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceDouble *out12_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out14_buffer = out13_buffer ? my_malloc(size, my_name) : NULL;
        SpiceBoolean *bool1_buffer = out14_buffer ? my_bool_malloc(size, my_name) : NULL;
        SpiceBoolean *bool2_buffer = bool1_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool2_buffer) {
            free(out11_buffer);
            free(out21_buffer);
            free(out12_buffer);
            free(out13_buffer);
            free(out14_buffer);
            free(bool1_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                str3,
                in11[i % in11_dim1],
                str4,
                str5,
                str6,
                in21 + (i % in21_dim1) * in21_dim2,
                out11_buffer + i,
                out21_buffer + i * N,
                out12_buffer + i,
                out13_buffer + i,
                out14_buffer + i,
                bool1_buffer + i,
                bool2_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
        *out14 = out14_buffer; *out14_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
        *bool2 = bool2_buffer; *bool2_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3s_d_3s_dX__d_dN_3d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceChar *str6,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1,
        SpiceDouble **out14, int *out14_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;
        *out14 = NULL; *out14_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out21_buffer = out11_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceDouble *out12_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out14_buffer = out13_buffer ? my_malloc(size, my_name) : NULL;
        if (!out14_buffer) {
            free(out11_buffer);
            free(out21_buffer);
            free(out12_buffer);
            free(out13_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                str3,
                in11[i % in11_dim1],
                str4,
                str5,
                str6,
                in21 + (i % in21_dim1) * in21_dim2,
                out11_buffer + i,
                out21_buffer + i * N,
                out12_buffer + i,
                out13_buffer + i,
                out14_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
        *out14 = out14_buffer; *out14_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_3s_dX__d_dN_3d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1,
        SpiceDouble **out14, int *out14_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;
        *out14 = NULL; *out14_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out21_buffer = out11_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceDouble *out12_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out14_buffer = out13_buffer ? my_malloc(size, my_name) : NULL;
        if (!out14_buffer) {
            free(out11_buffer);
            free(out21_buffer);
            free(out12_buffer);
            free(out13_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i % in11_dim1],
                str3,
                str4,
                str5,
                in21 + (i % in21_dim1) * in21_dim2,
                out11_buffer + i,
                out21_buffer + i * N,
                out12_buffer + i,
                out13_buffer + i,
                out14_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
        *out14 = out14_buffer; *out14_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d_dX__dN_b(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceBoolean *bool1_buffer = out21_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX__i_dM_dN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceInt **int1, int *int1_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *int1 = NULL; *int1_dim1 = 0;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;

        SpiceInt *int1_buffer = my_int_malloc(size, my_name);
        SpiceDouble *out21_buffer = int1_buffer ? my_malloc(size * M, my_name) : NULL;
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out22_buffer) {
            free(int1_buffer);
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                int1_buffer + i,
                out21_buffer + i * M,
                out22_buffer + i * N);
        }

        *int1 = int1_buffer; *int1_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_dX__i_dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        SpiceInt **int1, int *int1_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);

        *int1 = NULL; *int1_dim1 = 0;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceInt *int1_buffer = my_int_malloc(size, my_name);
        SpiceDouble *out21_buffer = int1_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out21_buffer) {
            free(int1_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in23 + (i % in23_dim1) * in23_dim2,
                int1_buffer + i,
                out21_buffer + i * N);
        }

        *int1 = int1_buffer; *int1_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_2d__RETURN_b(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceBoolean *bool1_buffer = my_bool_malloc(size, my_name);
        if (!bool1_buffer) return;
        for (int i = 0; i < size; i++) {
            bool1_buffer[i] = FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in11[i % in11_dim1],
                in12[i % in12_dim1]);
        }

        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_d_s__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                str1,
                in11[i],
                str2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_i_s_i__2d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceInt k1,
        ConstSpiceChar *str1,
        SpiceInt k2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        if (!out12_buffer) {
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i],
                k1,
                str1,
                k2,
                out11_buffer + i,
                out12_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_3i__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceInt k1,
        SpiceInt k2,
        SpiceInt k3,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                k1,
                k2,
                k3,
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dij__dij(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = in31_dim2; *out31_dim3 = in31_dim3;

        SpiceDouble *out31_buffer = my_malloc(size * in31_dim2 * in31_dim3, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                out31_buffer + i * in31_dim2 * in31_dim3, out31_dim2, out31_dim3);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_dXY__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in32_dim1) maxdim = in32_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in32_dim1 = (in32_dim1 == 0 ? 1 : in32_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in32 + (i % in32_dim1) * in32_dim2 * in32_dim3,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dji_djk__dik(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in32_dim1) maxdim = in32_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in32_dim1 = (in32_dim1 == 0 ? 1 : in32_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = in31_dim3; *out31_dim3 = in32_dim3;

        SpiceDouble *out31_buffer = my_malloc(size * in31_dim3 * in32_dim3, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in32 + (i % in32_dim1) * in32_dim2 * in32_dim3, in32_dim2, in32_dim3,
                out31_buffer + i * in31_dim3 * in32_dim3, out31_dim2, out31_dim3);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dji_dj__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in31_dim3;

        SpiceDouble *out21_buffer = my_malloc(size * in31_dim3, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                out21_buffer + i * in31_dim3, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dij_djk__dik(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in32_dim1) maxdim = in32_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in32_dim1 = (in32_dim1 == 0 ? 1 : in32_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = in31_dim2; *out31_dim3 = in32_dim3;

        SpiceDouble *out31_buffer = my_malloc(size * in31_dim2 * in32_dim3, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in32 + (i % in32_dim1) * in32_dim2 * in32_dim3, in32_dim2, in32_dim3,
                out31_buffer + i * in31_dim2 * in32_dim3, out31_dim2, out31_dim3);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dij_dkj__dik(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in32, int in32_dim1, int in32_dim2, int in32_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in32_dim1) maxdim = in32_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in32_dim1 = (in32_dim1 == 0 ? 1 : in32_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = in31_dim2; *out31_dim3 = in32_dim2;

        SpiceDouble *out31_buffer = my_malloc(size * in31_dim2 * in32_dim2, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in32 + (i % in32_dim1) * in32_dim2 * in32_dim3, in32_dim2, in32_dim3,
                out31_buffer + i * in31_dim2 * in32_dim2, out31_dim2, out31_dim3);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dij_dj__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in31_dim2;

        SpiceDouble *out21_buffer = my_malloc(size * in31_dim2, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                out21_buffer + i * in31_dim2, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_3d__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d_dX_dX__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_dX__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in23 + (i % in23_dim1) * in23_dim2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_8s_d__i(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceChar *str6,
        ConstSpiceChar *str7,
        ConstSpiceChar *str8,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceInt **int1, int *int1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *int1 = NULL; *int1_dim1 = 0;

        SpiceInt *int1_buffer = my_int_malloc(size, my_name);
        if (!int1_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                str3,
                str4,
                str5,
                str6,
                str7,
                str8,
                in11[i],
                int1_buffer + i);
        }

        *int1 = int1_buffer; *int1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_2d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_5d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in14, int in14_dim1,
        ConstSpiceDouble *in15, int in15_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in14_dim1) maxdim = in14_dim1;
        if (maxdim < in15_dim1) maxdim = in15_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in14_dim1 = (in14_dim1 == 0 ? 1 : in14_dim1);
        in15_dim1 = (in15_dim1 == 0 ? 1 : in15_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                in14[i % in14_dim1],
                in15[i % in15_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_4s__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in11[i],
                str1,
                str2,
                str3,
                str4);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in11[i % in11_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_dX_dX__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        ConstSpiceDouble *in24, int in24_dim1, int in24_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;
        if (maxdim < in24_dim1) maxdim = in24_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);
        in24_dim1 = (in24_dim1 == 0 ? 1 : in24_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in23 + (i % in23_dim1) * in23_dim2,
                in24 + (i % in24_dim1) * in24_dim2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__dM_dN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out22_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out21_buffer + i * M,
                out22_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_dX_d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                in12[i % in12_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_2d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_dX__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in21 + (i % in21_dim1) * in21_dim2,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_2d__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_eX_2d__3d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        SpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out13, int *out13_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out13 = NULL; *out13_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out13_buffer = out12_buffer ? my_malloc(size, my_name) : NULL;
        if (!out13_buffer) {
            free(out11_buffer);
            free(out12_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                out11_buffer + i,
                out12_buffer + i,
                out13_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out13 = out13_buffer; *out13_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_i__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceInt k1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i],
                k1,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_d_i__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceInt k1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in11[i % in11_dim1],
                k1,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_d_i__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceInt k1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in11[i % in11_dim1],
                k1,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_3d__dM_dN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out22_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out21_buffer + i * M,
                out22_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX__dM_dN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out22_buffer = out21_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out22_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * M,
                out22_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d__d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i],
                out11_buffer + i);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_4s_dX__dM_d_dN_b(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceChar *str6,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out11 = NULL; *out11_dim1 = 0;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out22_buffer = out11_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceBoolean *bool1_buffer = out22_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            free(out22_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i % in11_dim1],
                str3,
                str4,
                str5,
                str6,
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * M,
                out11_buffer + i,
                out22_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_2s_i__dN_d_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        SpiceInt k2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        if (!out12_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i],
                str1,
                str2,
                k2,
                out21_buffer + i * N,
                out11_buffer + i,
                out12_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_s_dX_s__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceChar *str2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                str1,
                in21 + (i % in21_dim1) * in21_dim2,
                str2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_2s_dX_dX__dN_d_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        if (!out12_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                str1,
                str2,
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * N,
                out11_buffer + i,
                out12_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_2s_i__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        SpiceInt k2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i],
                str1,
                str2,
                k2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_d_3s__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                in11[i],
                str2,
                str3,
                str4,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_s_i__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        SpiceInt k2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i],
                str1,
                k2,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_2s_dX__dN_d_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        if (!out12_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                str1,
                str2,
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * N,
                out11_buffer + i,
                out12_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_d_s__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i],
                str1,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_i_2d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                k1,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_3s_dX__dM_2d_dN_b(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out12, int *out12_dim1,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out11 = NULL; *out11_dim1 = 0;
        *out12 = NULL; *out12_dim1 = 0;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out12_buffer = out11_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out22_buffer = out12_buffer ? my_malloc(size * N, my_name) : NULL;
        SpiceBoolean *bool1_buffer = out22_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            free(out12_buffer);
            free(out22_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i % in11_dim1],
                str3,
                str4,
                str5,
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * M,
                out11_buffer + i,
                out12_buffer + i,
                out22_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out12 = out12_buffer; *out12_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_3s__dM_d_dN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        ConstSpiceChar *str5,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1,
        SpiceDouble **out22, int *out22_dim1, int *out22_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = M;
        *out11 = NULL; *out11_dim1 = 0;
        *out22 = NULL; *out22_dim1 = 0; *out22_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * M, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        SpiceDouble *out22_buffer = out11_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out22_buffer) {
            free(out21_buffer);
            free(out11_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i],
                str3,
                str4,
                str5,
                out21_buffer + i * M,
                out11_buffer + i,
                out22_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
        *out22 = out22_buffer; *out22_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_2s__dN_d(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i],
                str3,
                str4,
                out21_buffer + i * N,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_2s_d_2s__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str3,
        ConstSpiceChar *str4,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                str2,
                in11[i],
                str3,
                str4,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_3d__dN_b(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceBoolean *bool1_buffer = out21_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out21_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_s_i_d__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceChar *str1,
        SpiceInt k1,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                str1,
                k1,
                in11[i],
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_i_dX_i__dMN(NAME, FUNC, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceInt k1,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceInt k2,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = M; *out31_dim3 = N;

        SpiceDouble *out31_buffer = my_malloc(size * M * N, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                k1,
                in22 + (i % in22_dim1) * in22_dim2,
                k2,
                out31_buffer + i * M * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_2s__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in11[i],
                str1,
                str2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di__di_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in21_dim2;
        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * in21_dim2, my_name);
        SpiceDouble *out11_buffer = out21_buffer ? my_malloc(size, my_name) : NULL;
        if (!out11_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2, in21_dim2,
                out21_buffer + i * in21_dim2, out21_dim2,
                out11_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di_di__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in22_dim2;

        SpiceDouble *out21_buffer = my_malloc(size * in22_dim2, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2, in22_dim2,
                out21_buffer + i * in22_dim2, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di_di__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2, in22_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in21_dim2;

        SpiceDouble *out21_buffer = my_malloc(size * in21_dim2, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2, in21_dim2,
                out21_buffer + i * in21_dim2, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_dX_d_dX_d_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in13, int in13_dim1,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                in12[i % in12_dim1],
                in22 + (i % in22_dim1) * in22_dim2,
                in13[i % in13_dim1],
                in23 + (i % in23_dim1) * in23_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_dX_d_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                in12[i % in12_dim1],
                in22 + (i % in22_dim1) * in22_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_di_d_di__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in22_dim2;

        SpiceDouble *out21_buffer = my_malloc(size * in22_dim2, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                in12[i % in12_dim1],
                in22 + (i % in22_dim1) * in22_dim2, in22_dim2,
                out21_buffer + i * in22_dim2, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i) * in21_dim2, in21_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_dX__dN_b(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in23, int in23_dim1, int in23_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in23_dim1) maxdim = in23_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in23_dim1 = (in23_dim1 == 0 ? 1 : in23_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceBoolean *bool1_buffer = out21_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in23 + (i % in23_dim1) * in23_dim2,
                out21_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dX_d__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        ConstSpiceDouble *in11, int in11_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in22 + (i % in22_dim1) * in22_dim2,
                in11[i % in11_dim1],
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_dX__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_d_di__di(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in11_dim1;
        if (maxdim < in21_dim1) maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = in21_dim2;

        SpiceDouble *out21_buffer = my_malloc(size * in21_dim2, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in11[i % in11_dim1],
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                out21_buffer + i * in21_dim2, out21_dim2);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_dXY_dX__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in31_dim1) maxdim = in31_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i % in21_dim1) * in21_dim2,
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in22 + (i % in22_dim1) * in22_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di_dij_dj__RETURN_d(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in22, int in22_dim1, int in22_dim2,
        SpiceDouble **out11, int *out11_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;
        if (maxdim < in31_dim1) maxdim = in31_dim1;
        if (maxdim < in22_dim1) maxdim = in22_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in22_dim1 = (in22_dim1 == 0 ? 1 : in22_dim1);

        *out11 = NULL; *out11_dim1 = 0;

        SpiceDouble *out11_buffer = my_malloc(size, my_name);
        if (!out11_buffer) return;
        for (int i = 0; i < size; i++) {
            out11_buffer[i] = FUNC(
                in21 + (i % in21_dim1) * in21_dim2, in21_dim2,
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                in22 + (i % in22_dim1) * in22_dim2, in22_dim2);
        }

        *out11 = out11_buffer; *out11_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX__RETURN_b(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceBoolean *bool1_buffer = my_bool_malloc(size, my_name);
        if (!bool1_buffer) return;
        for (int i = 0; i < size; i++) {
            bool1_buffer[i] = FUNC(
                in21 + (i) * in21_dim2);
        }

        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_di__RETURN_b(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceBoolean *bool1_buffer = my_bool_malloc(size, my_name);
        if (!bool1_buffer) return;
        for (int i = 0; i < size; i++) {
            bool1_buffer[i] = FUNC(
                in21 + (i) * in21_dim2, in21_dim2);
        }

        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY_3d__dN_b(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        ConstSpiceDouble *in11, int in11_dim1,
        ConstSpiceDouble *in12, int in12_dim1,
        ConstSpiceDouble *in13, int in13_dim1,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2,
        SpiceBoolean **bool1, int *bool1_dim1) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;
        if (maxdim < in11_dim1) maxdim = in11_dim1;
        if (maxdim < in12_dim1) maxdim = in12_dim1;
        if (maxdim < in13_dim1) maxdim = in13_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);
        in11_dim1 = (in11_dim1 == 0 ? 1 : in11_dim1);
        in12_dim1 = (in12_dim1 == 0 ? 1 : in12_dim1);
        in13_dim1 = (in13_dim1 == 0 ? 1 : in13_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;
        *bool1 = NULL; *bool1_dim1 = 0;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        SpiceBoolean *bool1_buffer = out21_buffer ? my_bool_malloc(size, my_name) : NULL;
        if (!bool1_buffer) {
            free(out21_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i % in31_dim1) * in31_dim2 * in31_dim3,
                in11[i % in11_dim1],
                in12[i % in12_dim1],
                in13[i % in13_dim1],
                out21_buffer + i * N,
                bool1_buffer + i);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
        *bool1 = bool1_buffer; *bool1_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dXY__dLM_dN(NAME, FUNC, L, M, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = L; *out31_dim3 = M;
        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out31_buffer = my_malloc(size * L * M, my_name);
        SpiceDouble *out21_buffer = out31_buffer ? my_malloc(size * N, my_name) : NULL;
        if (!out21_buffer) {
            free(out31_buffer);
            return;
        }

        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3,
                out31_buffer + i * L * M,
                out21_buffer + i * N);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dX_3s__dN(NAME, FUNC, N)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in21, int in21_dim1, int in21_dim2,
        ConstSpiceChar *str1,
        ConstSpiceChar *str2,
        ConstSpiceChar *str3,
        SpiceDouble **out21, int *out21_dim1, int *out21_dim2) {
        char *my_name = "NAME" "_vector";

        int maxdim = in21_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in21_dim1 = (in21_dim1 == 0 ? 1 : in21_dim1);

        *out21 = NULL; *out21_dim1 = 0; *out21_dim2 = N;

        SpiceDouble *out21_buffer = my_malloc(size * N, my_name);
        if (!out21_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in21 + (i) * in21_dim2,
                str1,
                str2,
                str3,
                out21_buffer + i * N);
        }

        *out21 = out21_buffer; *out21_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/

%define VECTORIZE_dij__dji(NAME, FUNC)

%apply (void RETURN_VOID) {void NAME ## _vector};

%inline %{
    void NAME ## _vector(
        ConstSpiceDouble *in31, int in31_dim1, int in31_dim2, int in31_dim3,
        SpiceDouble **out31, int *out31_dim1, int *out31_dim2, int *out31_dim3) {
        char *my_name = "NAME" "_vector";

        int maxdim = in31_dim1;

        int size = (maxdim == 0 ? 1 : maxdim);
        in31_dim1 = (in31_dim1 == 0 ? 1 : in31_dim1);

        *out31 = NULL; *out31_dim1 = 0; *out31_dim2 = in31_dim3; *out31_dim3 = in31_dim2;

        SpiceDouble *out31_buffer = my_malloc(size * in31_dim3 * in31_dim2, my_name);
        if (!out31_buffer) return;
        for (int i = 0; i < size; i++) {
            FUNC(
                in31 + (i) * in31_dim2 * in31_dim3, in31_dim2, in31_dim3,
                out31_buffer + i * in31_dim3 * in31_dim2, out31_dim2, out31_dim3);
        }

        *out31 = out31_buffer; *out31_dim1 = maxdim;
    }
%}

%enddef

/******************************************************************************/
